<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Railtie | @vishnuatrai]]></title>
  <link href="http://vishnuatrai.in/blog/categories/railtie/atom.xml" rel="self"/>
  <link href="http://vishnuatrai.in/"/>
  <updated>2020-01-11T16:31:30+05:30</updated>
  <id>http://vishnuatrai.in/</id>
  <author>
    <name><![CDATA[vishnuatrai.in]]></name>
    <email><![CDATA[vishnu.atrai@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails::Railtie – Hook Everything]]></title>
    <link href="http://vishnuatrai.in/blog/2011/07/31/railsrailtie-e28093-hook-everything/"/>
    <updated>2011-07-31T17:33:44+05:30</updated>
    <id>http://vishnuatrai.in/blog/2011/07/31/railsrailtie-e28093-hook-everything</id>
    <content type="html"><![CDATA[<p>After Rails 3 released I have been trying to find major and important changes in rails framework over 2.x version. The change I like most is Rails Railtie. Using Railtie you can configure your own gem or plugin in a rails application according to your choice in boot process. <!--more-->  If you are a plugin developer, you can use Railtie class that is capable of loading generators, tasks, middlewares and adding subscribers.</p>

<p>Rails::Engine is nothing more than a Railtie and it has some initializers already set and Rails::Application and Rails::Plugin are also engines. Any subclass of Railtie can be use to initialize rails application, so your plugin can be a first class member of rails application.</p>

<p>Here is sample plugin Railtie that will be loaded when your rails application boots.</p>

<pre><code>require 'rails'
class MyPlugin &lt; Rails::Railtie
  # railtie code goes here
end
</code></pre>

<p>Here I will give you some examples of Railtie methods, how to customize and extend your rails application using your plugin or gem library.</p>

<h4>1) generators</h4>

<p>Rails will require any generators if you have require generator path in your Railtie class within generators block.</p>

<pre><code>generators do
  require 'lib/to/generator.rb'
end
</code></pre>

<h4>2) rake_tasks</h4>

<p>You can ship rake tasks of your plugin in rails application if you require in Railtie</p>

<pre><code>rake_tasks do 
  require 'lib/to/rake_task.rb'
end
</code></pre>

<h4>3) initializer</h4>

<p>Railtie initializer method can create initializers that can run during the Rails boot process. It has the options to run a initializer before or after a specific initializer.</p>

<pre><code>initializer "plugin_railtie.boot_plugin" do
  Plugin.boot(NewPlugin)
end

initializer "new_plugin_railtie.boot_new_plugin", :before =&gt; "plugin_railtie.boot_plugin" do
    NewPlugin.boot!
end
</code></pre>

<h4>4) console</h4>

<p>console method allows to add code that will run when Rails console starts.</p>

<pre><code> console do
   puts "my plugin loaded."
 end
</code></pre>
]]></content>
  </entry>
  
</feed>
