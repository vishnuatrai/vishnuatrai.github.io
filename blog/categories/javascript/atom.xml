<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | @vishnuatrai]]></title>
  <link href="http://vishnuatrai.in/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://vishnuatrai.in/"/>
  <updated>2020-04-04T16:37:47+05:30</updated>
  <id>http://vishnuatrai.in/</id>
  <author>
    <name><![CDATA[vishnuatrai.in]]></name>
    <email><![CDATA[vishnu.atrai@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javascript Object Oriented Programming]]></title>
    <link href="http://vishnuatrai.in/blog/2013/10/15/javascript-object-oriented-programming/"/>
    <updated>2013-10-15T18:00:18+05:30</updated>
    <id>http://vishnuatrai.in/blog/2013/10/15/javascript-object-oriented-programming</id>
    <content type="html"><![CDATA[<p>JavaScript is a prototype-based OOP language in which behaviour reuse
(inheritance) is achieved using existing objects which serve as prototypes. Whenever you
assign a object as prototype of other object, properties and methods will be available to
that object. <!--more-->You can override method or property in child object.</p>

<p>&ldquo;Everything&rdquo; in JavaScript is an Object. JavaScript allows you to define your own objects.
Objects are just data, with added properties and methods. This looks something similar to
ruby for me. Also root level prototype of a object is &ldquo;Object&rdquo; and prototype of &ldquo;Object&rdquo;
is null.</p>

<p>In this type of OOP languages there is no existences of classes like java. c#, ruby etc.
Here you create objects and inheritance you can achieve using prototype assignment.
Since only one prototype you can assign to a object so Javascript dosen&rsquo;t provide multiple
inheritence. Using prototype assignment chain to nexted level, it will provide multi-level
inheritence. eg</p>

<pre><code># A super class animal
function Animal(){
  this.legs = 0,
  this.word = '',
  this.walk = function(){
    var i = 0, s = '';
    for(; i &lt; this.legs; i++){
      s += ' step '
    }
    console.log(s);
  },
  this.speak = function(){
    console.log(this.word);
  }
};

a = new Animal();
a.walk()               =&gt; 
a.speak()              =&gt; 

# A child class human
function Human(){
  this.legs = 2,
  this.word = 'Hi'
};

Human.prototype = new Animal();

h = new Human();
h.walk()                =&gt; step step 
h.speak()               =&gt; Hi
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jasmine: Ajax and Spies]]></title>
    <link href="http://vishnuatrai.in/blog/2012/04/06/jasmine-ajax-and-spies/"/>
    <updated>2012-04-06T11:12:46+05:30</updated>
    <id>http://vishnuatrai.in/blog/2012/04/06/jasmine-ajax-and-spies</id>
    <content type="html"><![CDATA[<p>In continuation of previous post for Jasmine, here I want to share my experience with Jasmine and Ajax. I want to show how cool it is with jasmine to test ajax calls in javascript. <!--more--> Jasmine spies can be used for mock the ajax call with fake data. Spy replaces the function it is spying on. For example my javascript function have an ajax call &ndash;</p>

<pre><code>function myprofiledetails(){
    $.ajax({
      type: "GET",
      url: "http://vishnuatrai.in/aboutme.php",
      success: function(json){
        $('#infodiv').html("Ruby On Rails development with jasmine");
      }
   });
}
</code></pre>

<p>In spec file I can spy the ajax call in beforeEach function. And so it won&rsquo;t make a server call and return the fake data.</p>

<pre><code>describe("mock about me", function() {

  beforeEach(function() {
    //mocking ajax call with Jasmine Spies
    var fakeData = "Hi, I am doing Ruby On Rails development with jasmine";
    spyOn($, "ajax").andCallFake(function(params) {
      params.success(fakeData);
    });
  });

  it("Should have a Happy Face", function() {
    myprofiledetails();
    expect($('#infodiv')).toHaveText("Ruby On Rails development with jasmine");
  });
});
</code></pre>

<p>Jasmine provides some useful methods to support spies.</p>

<pre><code>expect(x).toHaveBeenCalled()
passes if x is a spy and was called

expect(x).toHaveBeenCalledWith(arguments)
passes if x is a spy and was called with the specified arguments

expect(x).not.toHaveBeenCalled()                       
passes if x is a spy and was not called

expect(x).not.toHaveBeenCalledWith(arguments)   
passes if x is a spy and was not called with the specified arguments
</code></pre>

<p>Spies can be trained to respond in a variety of ways when invoked:</p>

<pre><code>spyOn(x, 'method').andCallThrough():
spies on AND calls the original function spied on

spyOn(x, 'method').andReturn(arguments):
returns passed arguments when spy is called

spyOn(x, 'method').andThrow(exception):
throws passed exception when spy is called

spyOn(x, 'method').andCallFake(function): 
calls passed function when spy is called
</code></pre>

<p>There is a detailed wiki page for spices on github <a href="https://github.com/pivotal/jasmine/wiki/Spies.">https://github.com/pivotal/jasmine/wiki/Spies.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jasmine: BDD for Javascript]]></title>
    <link href="http://vishnuatrai.in/blog/2012/03/12/jasmine-bdd-for-javascript/"/>
    <updated>2012-03-12T14:24:24+05:30</updated>
    <id>http://vishnuatrai.in/blog/2012/03/12/jasmine-bdd-for-javascript</id>
    <content type="html"><![CDATA[<p>In web development, if we are doing web 2.0 and modern web concepts, we have to write a lot of javascript and ajax calls and that will increase client side javascript day by day. <!--more--> We have lot of good javascript libraries for implementation. For faster delivery of features we need to cover the client side javascript with test cases. Jasmine is a tool to do BDD for javascript. It can mock ajax calls and you can use some static templates as a result. Jasmine also can be useful for TDD with javascript.</p>

<h4>1. Setting up a project</h4>

<p>To set up a project for javascript BDD, first of all you need to add <strong>&lsquo;jasmine&rsquo;</strong> to your gem file. Then after bundle install you will have to run a generator {<strong>rails g jasmine:install</strong>} to generate jasmine defaults. Now you can run command <strong>rake jasmine</strong> to see your spec on browser. The server run default on 8888 port. You can see your specs by browsing <a href="http://localhost:8888.">http://localhost:8888.</a> To write specs you can add a .js file in spec/javascripts/my_javascript_spec.js.</p>

<h4>2. Syntax</h4>

<p>Jasmine is very similar with rSpec in terms of syntax. It has methods like <strong>describe</strong> and <strong>it</strong>. Both functions take two arguments, first a string to show the context and second function to test the results. <strong>describe</strong> can be used for grouping related specs.</p>

<pre><code>describe('addition', function () {  
    it('adds two numbers', function () {  
        expect(5 + 5).toEqual(10);  
    });  
}); 
</code></pre>

<h4>3. Setup and Tear-down</h4>

<p>Jasmine provides function <strong>beforeEach</strong> for setup the spec context and <strong>afterEach</strong> to clear the context.</p>

<pre><code>describe("Spec setup and tear-down", function() {
  var number;
  beforeEach(function() {
    number = 0;
    number += 1;
  });

  afterEach(function() {
    number = 0;
  });

  it("first assertion", function() {
    expect(number).toEqual(1);              #green
  });

  it("second assertion", function() {
    expect(number).toEqual(1);              #green
  });
});
</code></pre>

<h4>4. Matchers</h4>

<p>Given few of the matches you can use for assertions &ndash;</p>

<pre><code>toContain
   expect(["linux", "mac", "windows"]).toContain("linux");  
toMatch
   expect(1050.50).toMatch(/\$\d*.\d\d/);
toBeLessThan
   expect(1).toBeLessThan(2);  
toBeGreaterThan
   expect(2).toBeGreaterThan(1);
toBeTruthy
  expect(true).toBeTruthy(); 
toBeFalsy
  expect(false).toBeFalsy();  

and a lot many.
</code></pre>

<h4>5. Custom Matchers</h4>

<p>We can write our own custom matcher using <strong>this.addMatchers</strong> in beforeEach call.</p>

<pre><code>beforeEach(function () {  
  this.addMatchers({  
    toBeBetween: function (floor, ceiling) {  
      return this.actual &gt; floor &amp;&amp; this.actual &lt; ceiling;  
    }  
  });  
});  
</code></pre>
]]></content>
  </entry>
  
</feed>
