<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RoR | @vishnuatrai]]></title>
  <link href="http://vishnuatrai.com/blog/categories/ror/atom.xml" rel="self"/>
  <link href="http://vishnuatrai.com/"/>
  <updated>2014-04-25T14:31:39+05:30</updated>
  <id>http://vishnuatrai.com/</id>
  <author>
    <name><![CDATA[vishnuatrai.com]]></name>
    <email><![CDATA[me@vishnuatrai.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Tools for Multi-tenant SOA Platform]]></title>
    <link href="http://vishnuatrai.com/blog/2013/08/02/multi-tenant-soa-platform-on-ruby-on-rails/"/>
    <updated>2013-08-02T18:03:45+05:30</updated>
    <id>http://vishnuatrai.com/blog/2013/08/02/multi-tenant-soa-platform-on-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>After cloud computing, Multi-tenancy and SOA become a buzzword for tech companies those provide B2B solutions.</p>

<p>Multi-tenancy will reduce the cost and simplifies the release management.<!--more--></p>

<p>On the other hand, SOA is to divide single monolithic application to multiple loosely coupled self contained independent applications aka services. SOA will benefit to develop new functions rapidly and scale platform in specific areas.</p>

<h3>Tools &amp; Tips for Multi-tenancy</h3>

<p>Database seperation for each client we are using apartment gem. That gives very easy interface
to manage seperate databases for different clients. To run background tasks we are using
apartment-sidekiq gem. That will automatically take care of database connection for a background
job initiated.</p>

<p>You add these gems in your Gemfile and good to go.</p>

<pre><code>gem 'apartment'
gem 'apartment-sidekiq'
</code></pre>

<h3>Tools and Tips for SOA (Service Oriented Architucture)</h3>

<p>To expose APIs you can use ruby lightwaight framework sinatra. ActiveRecord for ORM to backend
You can use rspec for testing framework. Sometimes you make multiple requests to different
services for a action, in these scenerios you can make parallel requests using typhoeus gem.
That will make a block call, get the response from different services, process those
responses and give back the result to end user. In your Gemfile you can add typhoeus.</p>

<pre><code>gem 'typhoeus'
</code></pre>

<p>You can use JSON responses for all your APIs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4 - ActiveSupport::Concern]]></title>
    <link href="http://vishnuatrai.com/blog/2013/06/24/rails-4-activesupport-concern/"/>
    <updated>2013-06-24T18:00:23+05:30</updated>
    <id>http://vishnuatrai.com/blog/2013/06/24/rails-4-activesupport-concern</id>
    <content type="html"><![CDATA[<p>Rails 4 ActiveSupport::Concern is a very cool feature to organize your module in such a way
that when you include module in a class you don&rsquo;t need to write extra callbacks to extend or
include methods in your class. This feature is a great way to keep your code organized and DRY. This will also handles module dependencies.</p>

<!--more-->


<p>You just need to require activesupport/concern and need to extend your module with ActiveSupport::Concern.
When you include your module in a class, included block will be executed with in class
context, ClassMethods block will be added to class itself and methods inside will become
class methods, other methods outside included and ClassMethods block will be included as
instance methods. eg.</p>

<pre><code>module Commentable
  extend ActiveSupport::Concern

  included do         # This block will be executed within class itself
    has_many :comments, as: :commentable, dependent: :destroy
    scope :with_comments, -&gt;{ joins(:comments) }
  end 

  module ClassMethods # Methods within this black will be added to class methods
    def comment_search(params)
      .....
    end
  end

  def comment_titles  # This method will be added to instance methods
    comments.map(&amp;:title) 
  end      
  def comment_users   # This method will be added to instance methods
    comments.map(&amp;:username)
  end

end
</code></pre>

<p>This should be your module structure and when you include your module in class it will work.
No method will break. eg.</p>

<pre><code>Class Post
  include Commentable
end

Post.with_comments  
Post.comment_search({}) 

p = Post.find(1)
p.comments
p.comment_titles
p.comment_users
</code></pre>
]]></content>
  </entry>
  
</feed>
