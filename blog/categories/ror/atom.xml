<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RoR | @vishnuatrai]]></title>
  <link href="http://vishnuatrai.in/blog/categories/ror/atom.xml" rel="self"/>
  <link href="http://vishnuatrai.in/"/>
  <updated>2019-12-27T20:34:05+05:30</updated>
  <id>http://vishnuatrai.in/</id>
  <author>
    <name><![CDATA[vishnuatrai.in]]></name>
    <email><![CDATA[vishnu.atrai@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What Is New in Rails 4.2]]></title>
    <link href="http://vishnuatrai.in/blog/2015/01/15/what-is-new-in-rails-4-dot-2/"/>
    <updated>2015-01-15T17:58:43+05:30</updated>
    <id>http://vishnuatrai.in/blog/2015/01/15/what-is-new-in-rails-4-dot-2</id>
    <content type="html"><![CDATA[<h3>Active Job</h3>

<p>Active Job is a framework for declaring jobs and making them run on a variety of queueing backends. These jobs can be everything from regularly scheduled clean-ups, to billing charges, to mailings. Anything that can be chopped up into small units of work and run in parallel.<!--more--></p>

<pre><code>class GuestsCleanupJob &lt; ActiveJob::Base
  queue_as :default

  def perform(*guests)
    # Do something later
  end
end

# Enqueue a job to be performed as soon the queuing system is free.
GuestsCleanupJob.perform_later guest

#Setting the Backend
# config/application.rb
module YourApp
  class Application &lt; Rails::Application
    # Be sure to have the adapter's gem in your Gemfile and follow
    # the adapter's specific installation and deployment instructions.
    config.active_job.queue_adapter = :sidekiq
  end
end
</code></pre>

<h3>Asynchronous Mails</h3>

<p>Building on top of Active Job, Action Mailer now comes with a <code>deliver_later</code> method that sends emails via the queue, so it doesn&rsquo;t block the controller or model if the queue is asynchronous (the default inline queue blocks).</p>

<p>Sending emails right away is still possible with <code>deliver_now</code>.</p>

<h3>Adequate Record</h3>

<p>Adequate Record is a set of performance improvements in Active Record that makes common find and find_by calls and some association queries up to 2x faster.</p>

<p>It works by caching common SQL queries as prepared statements and reusing them on similar calls, skipping most of the query-generation work on subsequent calls.</p>

<pre><code>Post.find(1)  # First call generates and cache the prepared statement
Post.find(2)  # Subsequent calls reuse the cached prepared statement

Post.find_by_title('first post')
Post.find_by_title('second post')

Post.find_by(title: 'first post')
Post.find_by(title: 'second post')

post.comments
post.comments(true)
</code></pre>

<p>Caching is not used in the following scenarios:</p>

<pre><code>- The model has a default scope
- The model uses single table inheritance
- find with a list of ids, eg.
    Post.find(1, 2, 3)
    Post.find([1,2])
- find_by with SQL fragments, eg.
    Post.find_by('published_at &lt; ?', 2.weeks.ago)
</code></pre>

<h3>Web Console</h3>

<p>Web Console adds an interactive Ruby console on every error page and provides a console view and controller helpers.</p>

<p>The interactive console on error pages lets you execute code in the context of the place where the exception originated. The console helper, if called anywhere in a view or controller, launches an interactive console with the final context, once rendering has completed.</p>

<h3>Foreign Key Support</h3>

<p>The migration DSL now supports adding and removing foreign keys. They are dumped to <code>schema.rb</code> as well. At this time, only the <code>mysql</code>, <code>mysql2</code> and <code>postgresql</code> adapters support foreign keys.</p>

<pre><code># add a foreign key to `articles.author_id` referencing `authors.id`
add_foreign_key :articles, :authors

# add a foreign key to `articles.author_id` referencing `users.lng_id`
add_foreign_key :articles, :users, column: :author_id, primary_key: "lng_id"

# remove the foreign key on `accounts.branch_id`
remove_foreign_key :accounts, :branches

# remove the foreign key on `accounts.owner_id`
remove_foreign_key :accounts, column: :owner_id
</code></pre>

<h3>References</h3>

<p><a href="http://guides.rubyonrails.org/4_2_release_notes.html">http://guides.rubyonrails.org/4_2_release_notes.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Is New in Rails 4.1]]></title>
    <link href="http://vishnuatrai.in/blog/2014/05/31/what-is-new-in-rails-4-dot-1/"/>
    <updated>2014-05-31T19:59:28+05:30</updated>
    <id>http://vishnuatrai.in/blog/2014/05/31/what-is-new-in-rails-4-dot-1</id>
    <content type="html"><![CDATA[<p>Rails 4.1 is a minor release but includes interesting features below &ndash;</p>

<h3>Spring</h3>

<p>Spring is new application preloader(like spork and zeous) available by default<!--more-->
to rails app. Tests, rake and generators will be running much faster on large apps.</p>

<h3>Secrets</h3>

<p>New file config/secrets.yml for your sensitive data. It contains rails app default
secrets but you can add your secret keys here.</p>

<h3>Action Pack Variants</h3>

<p>Render different views, allows to have different templates and action responses for
the same mime type (say, HTML), even behave differently for phones, tablets and
desktop browsers. You can now have individual templates for the desktop, tablet,
and phone views while sharing all the same controller logic.</p>

<h3>ActionMailer Previews</h3>

<p>Sort of like LetterOpener and MailPreview, provide a way to visually see how emails
look by visiting a special URL that renders them. The preview is available in ie.
<a href="http://localhost:3000/rails/mailers/notifier/welcome,">http://localhost:3000/rails/mailers/notifier/welcome,</a> and a list of them in
<a href="http://localhost:3000/rails/mailers.">http://localhost:3000/rails/mailers.</a> By default, these preview classes live in
test/mailers/previews. This can be configured using the preview_path option.</p>

<h3>ActiveRecord enums</h3>

<p>Declare an enum attribute where the values map to integers in the database, but can
be queried by name. The good: Faster! Probably. It stores integers instead of strings.
You won&rsquo;t notice.</p>

<pre><code>class Conversation &lt; ActiveRecord::Base
  enum status: [ :active, :archived ]
end

conversation.archived!
Conversation.statuses # =&gt; { "active" =&gt; 0, "archived" =&gt; 1 }    
</code></pre>

<h3>Message Verifiers</h3>

<p>Message verifiers can be used to generate and verify signed messages. This can be
useful to safely transport sensitive data like remember-me tokens and friends.
The method Rails.application.message_verifier returns a new message verifier that
signs messages with a key derived from secret_key_base and the given message verifier name:</p>

<pre><code>signed_token = Rails.application.message_verifier(:remember_me).generate(token)
Rails.application.message_verifier(:remember_me).verify(signed_token) # =&gt; token

Rails.application.message_verifier(:remember_me).verify(tampered_token)
# raises ActiveSupport::MessageVerifier::InvalidSignature
</code></pre>

<h3>References</h3>

<p><a href="http://weblog.rubyonrails.org/2014/4/8/Rails-4-1/">http://weblog.rubyonrails.org/2014/4/8/Rails-4-1/</a></p>

<p><a href="http://edgeguides.rubyonrails.org/4_1_release_notes.html">http://edgeguides.rubyonrails.org/4_1_release_notes.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby for Multi-tenant SOA Platform]]></title>
    <link href="http://vishnuatrai.in/blog/2013/08/02/multi-tenant-soa-platform-on-ruby-on-rails/"/>
    <updated>2013-08-02T18:03:45+05:30</updated>
    <id>http://vishnuatrai.in/blog/2013/08/02/multi-tenant-soa-platform-on-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>After cloud computing, Multi-tenancy and SOA become a buzzword for tech companies those provide B2B solutions.</p>

<p>Multi-tenancy will reduce the cost and simplifies the release management.<!--more--></p>

<p>On the other hand, SOA is to divide single monolithic application to multiple loosely coupled self contained independent applications aka services. SOA will benefit to develop new functions rapidly and scale platform in specific areas.</p>

<h3>Tools &amp; Tips for Multi-tenancy</h3>

<p>Database seperation for each client we are using apartment gem. That gives very easy interface
to manage seperate databases for different clients. To run background tasks we are using
apartment-sidekiq gem. That will automatically take care of database connection for a background
job initiated.</p>

<p>You add these gems in your Gemfile and good to go.</p>

<pre><code>gem 'apartment'
gem 'apartment-sidekiq'
</code></pre>

<h3>Tools and Tips for SOA (Service Oriented Architucture)</h3>

<p>To expose APIs you can use ruby lightwaight framework sinatra. ActiveRecord for ORM to backend
You can use rspec for testing framework. Sometimes you make multiple requests to different
services for a action, in these scenerios you can make parallel requests using typhoeus gem.
That will make a block call, get the response from different services, process those
responses and give back the result to end user. In your Gemfile you can add typhoeus.</p>

<pre><code>gem 'sinatra'
gem 'activerecord'
gem 'typhoeus'
</code></pre>

<p>You can use JSON responses for all your APIs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Is New in Rails 4.0]]></title>
    <link href="http://vishnuatrai.in/blog/2013/07/18/what-is-new-in-rails-4-dot-0/"/>
    <updated>2013-07-18T19:58:40+05:30</updated>
    <id>http://vishnuatrai.in/blog/2013/07/18/what-is-new-in-rails-4-dot-0</id>
    <content type="html"><![CDATA[<p>Rails 4.0 and newer version will support ruby 1.9.3+ only. It wont work with lessor
version then ruby 1.9.3. Major developments are below &ndash;</p>

<h3>Ruby 2.0 preferred; 1.9.3+ required</h3>

<h3>Strong Parameters</h3>

<h3>Turbolinks</h3>

<h3>Russian Doll Caching</h3>

<h3>Live Streaming</h3>

<h3>Rails Queue</h3>

<h3>Asynchronous Action Mailer</h3>

<h3>Barebone Models &ndash; ActiveModel::Model</h3>

<h3>Http PATCH</h3>

<h3>Custom Flash Types</h3>

<h3>Flush content_for blocks</h3>

<h3>Rounting Concerns</h3>

<h3>Multiple Route Files</h3>

<h3>PostgreSQL Array Support</h3>

<h3>Page and Action Caching</h3>

<h3>Cache Digest</h3>

<h3>Controller Wise ETags</h3>

<h3>where.not and Chainable relation.none and Relation._!</h3>

<h3>Action Callbacks Renamed</h3>

<h3>Default Index Page</h3>

<h3>HTML5 Input Helpers</h3>

<h3>Models Concerns</h3>

<h3>vendor/plugins and Ruby 1.9.3 Lesser Banned!</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4 - ActiveSupport::Concern]]></title>
    <link href="http://vishnuatrai.in/blog/2013/06/24/rails-4-activesupport-concern/"/>
    <updated>2013-06-24T18:00:23+05:30</updated>
    <id>http://vishnuatrai.in/blog/2013/06/24/rails-4-activesupport-concern</id>
    <content type="html"><![CDATA[<p>Rails 4 ActiveSupport::Concern is a very cool feature to organize your module in such a way
that when you include module in a class you don&rsquo;t need to write extra callbacks to extend or
include methods in your class. This feature is a great way to keep your code organized and DRY. This handles module dependencies also.</p>

<!--more-->


<p>You just need to require activesupport/concern and need to extend your module with ActiveSupport::Concern.
When you include your module in a class, included block will be executed with in class
context, ClassMethods block will be added to class itself and methods inside will become
class methods, other methods outside included and ClassMethods block will be included as
instance methods. eg.</p>

<pre><code>module Commentable
  extend ActiveSupport::Concern

  included do         # This block will be executed within class itself
    has_many :comments, as: :commentable, dependent: :destroy
    scope :with_comments, -&gt;{ joins(:comments) }
  end 

  module ClassMethods # Methods within this black will be added to class methods
    def comment_search(params)
      .....
    end
  end

  def comment_titles  # This method will be added to instance methods
    comments.map(&amp;:title) 
  end      
  def comment_users   # This method will be added to instance methods
    comments.map(&amp;:username)
  end

end
</code></pre>

<p>This should be your module structure and when you include your module in class it will work.
No method will break. eg.</p>

<pre><code>Class Post
  include Commentable
end

Post.with_comments  
Post.comment_search({}) 

p = Post.find(1)
p.comments
p.comment_titles
p.comment_users
</code></pre>
]]></content>
  </entry>
  
</feed>
