<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RoR | @vishnuatrai]]></title>
  <link href="http://vishnuatrai.in/blog/categories/ror/atom.xml" rel="self"/>
  <link href="http://vishnuatrai.in/"/>
  <updated>2020-01-24T17:25:55+05:30</updated>
  <id>http://vishnuatrai.in/</id>
  <author>
    <name><![CDATA[vishnuatrai.in]]></name>
    <email><![CDATA[vishnu.atrai@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What Is New in Rails 5.2]]></title>
    <link href="http://vishnuatrai.in/blog/2018/01/20/what-is-new-in-rails-5-dot-2/"/>
    <updated>2018-01-20T16:02:51+05:30</updated>
    <id>http://vishnuatrai.in/blog/2018/01/20/what-is-new-in-rails-5-dot-2</id>
    <content type="html"><![CDATA[<h3>Active Storage</h3>

<p>Active Storage supports modern approach for file uploading to Amazon S3, Google Cloud Storage, Microsoft Azure Cloud file storage. It will also provide references to active record database tables <code>active_storage_blobs</code> and <code>active_storage_attachments</code>. <code>rails active_storage:install</code> will install initial setup for active storage.<!--more-->Configure and setup <code>config/storage.yml</code> cloud credentials and storage buckets.</p>

<pre><code>#config/storage.yml
local:
  service: Disk
  root: &lt;%= Rails.root.join("storage") %&gt;
test:
  service: Disk
  root: &lt;%= Rails.root.join("tmp/storage") %&gt;
amazon:
  service: S3
  access_key_id: ""
  secret_access_key: ""
  bucket: ""
  region: ""
</code></pre>

<h3>Redis Cache Store</h3>

<p>Rails 5.2 ships with built-in Redis cache store. The Redis cache store takes advantage of Redis support for automatic eviction when it reaches max memory, allowing it to behave much like a Memcached cache server.</p>

<p>Finally, add the configuration in the relevant <code>config/environments/*.rb</code> file:</p>

<pre><code>config.cache_store = :redis_cache_store, { url: 'redis://redis-server:6379' }
</code></pre>

<h3>HTTP/2 Early Hints</h3>

<p>This means we can automatically instruct the web server to send required style sheet and JavaScript assets early. Which means faster full page delivery.</p>

<p>To start the server with Early Hints enabled pass <code>--early-hints</code> to <code>rails server</code></p>

<h3>Credentials</h3>

<p>Added <code>config/credentials.yml.enc</code> file to store production app secrets. It allows saving any authentication credentials for third-party services directly in repository encrypted with a key in the <code>config/master.key</code> file or the <code>RAILS_MASTER_KEY</code> environment variable</p>

<p>To add new secret to credentials, first run rails secret to get a new secret. Then run rails credentials:edit to edit credentials, and add the secret. Running credentials:edit creates new credentials file and master key, if they did not already exist.</p>

<p>By default, this file contains the application&rsquo;s <code>secret_key_base</code>, but it could also be used to store other credentials such as access keys for external APIs.</p>

<p>The secrets kept in credentials file are accessible via <code>Rails.application.credentials</code>. For example, with the following decrypted <code>config/credentials.yml.enc</code></p>

<p>  #config/credentials.yml.enc</p>

<pre><code>secret_key_base:&lt;secret key base&gt;
api_client_key: &lt;secret key1&gt;
api_client_secret: &lt;secret key2&gt;
</code></pre>

<h3>Content Security Policy</h3>

<p>Content security policy can be configured as a global default policy and then override it on a per-resource basis and even use lambdas to inject per-request values into the header such as account subdomains in a multi-tenant application.</p>

<p>The HTTP <code>Content-Security-Policy</code> response header allows web site administrators to control resources the user agent is allowed to load for a given page. With a few exceptions, policies mostly involve specifying server origins and script endpoints.</p>

<p>Example &ndash;
  # config/initializers/content_security_policy.rb</p>

<pre><code>Rails.application.config.content_security_policy do |policy|
  policy.default_src :self, :https
  policy.font_src    :self, :https, :data
  policy.img_src     :self, :https, :data
  policy.object_src  :none
  policy.script_src  :self, :https
  policy.style_src   :self, :https

  # Specify URI for violation reports
  policy.report_uri "/csp-violation-report-path"
end
</code></pre>

<p>Example controller overrides:</p>

<pre><code># Override policy inline
  class PostsController &lt; ApplicationController
    content_security_policy do |p|
      p.upgrade_insecure_requests true
    end
  end

# Using literal values
  class PostsController &lt; ApplicationController
    content_security_policy do |p|
      p.base_uri "https://www.example.com"
    end
  end

# Disabling the global CSP
  class PagesController &lt; ApplicationController
    content_security_policy false, only: :index
  end
</code></pre>

<br/>


<p>References: <a href="https://guides.rubyonrails.org/5_2_release_notes.html">https://guides.rubyonrails.org/5_2_release_notes.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Is New in Rails 5]]></title>
    <link href="http://vishnuatrai.in/blog/2016/07/05/what-is-new-in-rails-5/"/>
    <updated>2016-07-05T17:34:19+05:30</updated>
    <id>http://vishnuatrai.in/blog/2016/07/05/what-is-new-in-rails-5</id>
    <content type="html"><![CDATA[<h3>ActionCable</h3>

<p>Action Cable can integrates websocket with rails application. Action Cable server can handle multiple connection instances. It has only one instance per websocket connection. The client websocker connection(consumer) can subscribe to multiple cable channels.<!--more-->For example Action Cable server can have a <code>ChatChannel</code> and an <code>AppearancesChannel</code> and a consumer(websocket) can subscribe to either one or both of channels.</p>

<pre><code>#Publisher Streams
# app/channels/chat_channel.rb
class ChatChannel &lt; ApplicationCable::Channel
    def subscribed
        stream_from "chat_#{params[:room]}"
    end
end

#Subscriber
// app/javascript/channels/chat_channel.js
import consumer from "./consumer"
consumer.subscriptions.create({ channel: "ChatChannel", room: "Best Room" })
</code></pre>

<h3>ActiveRecord::Attributes</h3>

<p>Define an <code>attribute</code> on a model with type. It is not essential to have a database column with the custom model <code>attribute</code>. <code>attribute</code> can also be used to provide default values.</p>

<pre><code># db/schema.rb
create_table :profiles, force: true do |t|
    t.decimal :gpa
    t.string :name, default: "Full Name"
end

# app/models/profile.rb
class Profile &lt; ActiveRecord::Base
end

profile = Profile.new(gpa: '4.1')

# before
profile.gpa # =&gt; BigDecimal.new(4.1)
profile.new.name # =&gt; "Full Name"

class Profile &lt; ActiveRecord::Base
    attribute :gpa, :integer # custom type
    attribute :name, :string, default: "Your Name" # default value
    attribute :current_time, :datetime, default: -&gt; { Time.now } # default value
    attribute :field_without_db_column, :integer, array: true
end

# after
profile.gpa # =&gt; 10
Profile.new.name # =&gt; "Your Name"
Profile.new.current_time # =&gt; 2015-05-30 11:04:48 -0600
model = Profile.new(field_without_db_column: ["1", "2", "3"])
model.attributes # =&gt; {field_without_db_column: [1, 2, 3]}
</code></pre>

<h3>Rails API &ndash; ActionController::API</h3>

<p>To avoid middlewares used for browser based web applications and server public facing json APIs, we can create API only rails application here after 5.0. <code>rails new my_api --api</code> can be used to generate application which will be API only and will not generate assets and views.</p>

<pre><code># app/controllers/application_controller.rb
class ApplicationController &lt; ActionController::API
end
</code></pre>

<h3>Ruby 2.2.2+ required version from Rails 5.0</h3>

<p>Ruby 2.2.2+ required version from Rails 5.0</p>

<br />


<br />


<h3>References</h3>

<p><a href="https://guides.rubyonrails.org/5_0_release_notes.html">https://guides.rubyonrails.org/5_0_release_notes.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Is New in Rails 4.2]]></title>
    <link href="http://vishnuatrai.in/blog/2015/01/15/what-is-new-in-rails-4-dot-2/"/>
    <updated>2015-01-15T17:58:43+05:30</updated>
    <id>http://vishnuatrai.in/blog/2015/01/15/what-is-new-in-rails-4-dot-2</id>
    <content type="html"><![CDATA[<h3>Active Job</h3>

<p>Active Job is a framework for declaring jobs and making them run on a variety of queueing backends. These jobs can be everything from regularly scheduled clean-ups, to billing charges, to mailings. Anything that can be chopped up into small units of work and run in parallel.<!--more--></p>

<pre><code>class GuestsCleanupJob &lt; ActiveJob::Base
  queue_as :default

  def perform(*guests)
    # Do something later
  end
end

# Enqueue a job to be performed as soon the queuing system is free.
GuestsCleanupJob.perform_later guest

#Setting the Backend
# config/application.rb
module YourApp
  class Application &lt; Rails::Application
    # Be sure to have the adapter's gem in your Gemfile and follow
    # the adapter's specific installation and deployment instructions.
    config.active_job.queue_adapter = :sidekiq
  end
end
</code></pre>

<h3>Asynchronous Mails</h3>

<p>Building on top of Active Job, Action Mailer now comes with a <code>deliver_later</code> method that sends emails via the queue, so it doesn&rsquo;t block the controller or model if the queue is asynchronous (the default inline queue blocks).</p>

<p>Sending emails right away is still possible with <code>deliver_now</code>.</p>

<h3>Adequate Record</h3>

<p>Adequate Record is a set of performance improvements in Active Record that makes common find and find_by calls and some association queries up to 2x faster.</p>

<p>It works by caching common SQL queries as prepared statements and reusing them on similar calls, skipping most of the query-generation work on subsequent calls.</p>

<pre><code>Post.find(1)  # First call generates and cache the prepared statement
Post.find(2)  # Subsequent calls reuse the cached prepared statement

Post.find_by_title('first post')
Post.find_by_title('second post')

Post.find_by(title: 'first post')
Post.find_by(title: 'second post')

post.comments
post.comments(true)
</code></pre>

<p>Caching is not used in the following scenarios:</p>

<pre><code>- The model has a default scope
- The model uses single table inheritance
- find with a list of ids, eg.
    Post.find(1, 2, 3)
    Post.find([1,2])
- find_by with SQL fragments, eg.
    Post.find_by('published_at &lt; ?', 2.weeks.ago)
</code></pre>

<h3>Web Console</h3>

<p>Web Console adds an interactive Ruby console on every error page and provides a console view and controller helpers.</p>

<p>The interactive console on error pages lets you execute code in the context of the place where the exception originated. The console helper, if called anywhere in a view or controller, launches an interactive console with the final context, once rendering has completed.</p>

<h3>Foreign Key Support</h3>

<p>The migration DSL now supports adding and removing foreign keys. They are dumped to <code>schema.rb</code> as well. At this time, only the <code>mysql</code>, <code>mysql2</code> and <code>postgresql</code> adapters support foreign keys.</p>

<pre><code># add a foreign key to `articles.author_id` referencing `authors.id`
add_foreign_key :articles, :authors

# add a foreign key to `articles.author_id` referencing `users.lng_id`
add_foreign_key :articles, :users, column: :author_id, primary_key: "lng_id"

# remove the foreign key on `accounts.branch_id`
remove_foreign_key :accounts, :branches

# remove the foreign key on `accounts.owner_id`
remove_foreign_key :accounts, column: :owner_id
</code></pre>

<h3>References</h3>

<p><a href="http://guides.rubyonrails.org/4_2_release_notes.html">http://guides.rubyonrails.org/4_2_release_notes.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Is New in Rails 4.1]]></title>
    <link href="http://vishnuatrai.in/blog/2014/05/31/what-is-new-in-rails-4-dot-1/"/>
    <updated>2014-05-31T19:59:28+05:30</updated>
    <id>http://vishnuatrai.in/blog/2014/05/31/what-is-new-in-rails-4-dot-1</id>
    <content type="html"><![CDATA[<p>Rails 4.1 is a minor release but includes interesting features below &ndash;</p>

<h3>Spring</h3>

<p>Spring is new application preloader(like spork and zeous) available by default<!--more-->
to rails app. Tests, rake and generators will be running much faster on large apps.</p>

<h3>Secrets</h3>

<p>New file config/secrets.yml for your sensitive data. It contains rails app default
secrets but you can add your secret keys here.</p>

<h3>Action Pack Variants</h3>

<p>Render different views, allows to have different templates and action responses for
the same mime type (say, HTML), even behave differently for phones, tablets and
desktop browsers. You can now have individual templates for the desktop, tablet,
and phone views while sharing all the same controller logic.</p>

<h3>ActionMailer Previews</h3>

<p>Sort of like LetterOpener and MailPreview, provide a way to visually see how emails
look by visiting a special URL that renders them. The preview is available in ie.
<a href="http://localhost:3000/rails/mailers/notifier/welcome,">http://localhost:3000/rails/mailers/notifier/welcome,</a> and a list of them in
<a href="http://localhost:3000/rails/mailers.">http://localhost:3000/rails/mailers.</a> By default, these preview classes live in
test/mailers/previews. This can be configured using the preview_path option.</p>

<h3>ActiveRecord enums</h3>

<p>Declare an enum attribute where the values map to integers in the database, but can
be queried by name. The good: Faster! Probably. It stores integers instead of strings.
You won&rsquo;t notice.</p>

<pre><code>class Conversation &lt; ActiveRecord::Base
  enum status: [ :active, :archived ]
end

conversation.archived!
Conversation.statuses # =&gt; { "active" =&gt; 0, "archived" =&gt; 1 }    
</code></pre>

<h3>Message Verifiers</h3>

<p>Message verifiers can be used to generate and verify signed messages. This can be
useful to safely transport sensitive data like remember-me tokens and friends.
The method Rails.application.message_verifier returns a new message verifier that
signs messages with a key derived from secret_key_base and the given message verifier name:</p>

<pre><code>signed_token = Rails.application.message_verifier(:remember_me).generate(token)
Rails.application.message_verifier(:remember_me).verify(signed_token) # =&gt; token

Rails.application.message_verifier(:remember_me).verify(tampered_token)
# raises ActiveSupport::MessageVerifier::InvalidSignature
</code></pre>

<h3>References</h3>

<p><a href="http://weblog.rubyonrails.org/2014/4/8/Rails-4-1/">http://weblog.rubyonrails.org/2014/4/8/Rails-4-1/</a></p>

<p><a href="http://edgeguides.rubyonrails.org/4_1_release_notes.html">http://edgeguides.rubyonrails.org/4_1_release_notes.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby for Multi-tenant SOA Platform]]></title>
    <link href="http://vishnuatrai.in/blog/2013/08/02/multi-tenant-soa-platform-on-ruby-on-rails/"/>
    <updated>2013-08-02T18:03:45+05:30</updated>
    <id>http://vishnuatrai.in/blog/2013/08/02/multi-tenant-soa-platform-on-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>After cloud computing, Multi-tenancy and SOA become a buzzword for tech companies those provide B2B solutions.</p>

<p>Multi-tenancy will reduce the cost and simplifies the release management.<!--more--></p>

<p>On the other hand, SOA is to divide single monolithic application to multiple loosely coupled self contained independent applications aka services. SOA will benefit to develop new functions rapidly and scale platform in specific areas.</p>

<h3>Tools &amp; Tips for Multi-tenancy</h3>

<p>Database seperation for each client we are using apartment gem. That gives very easy interface
to manage seperate databases for different clients. To run background tasks we are using
apartment-sidekiq gem. That will automatically take care of database connection for a background
job initiated.</p>

<p>You add these gems in your Gemfile and good to go.</p>

<pre><code>gem 'apartment'
gem 'apartment-sidekiq'
</code></pre>

<h3>Tools and Tips for SOA (Service Oriented Architucture)</h3>

<p>To expose APIs you can use ruby lightwaight framework sinatra. ActiveRecord for ORM to backend
You can use rspec for testing framework. Sometimes you make multiple requests to different
services for a action, in these scenerios you can make parallel requests using typhoeus gem.
That will make a block call, get the response from different services, process those
responses and give back the result to end user. In your Gemfile you can add typhoeus.</p>

<pre><code>gem 'sinatra'
gem 'activerecord'
gem 'typhoeus'
</code></pre>

<p>You can use JSON responses for all your APIs.</p>
]]></content>
  </entry>
  
</feed>
