<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Technology | @vishnuatrai]]></title>
  <link href="http://vishnuatrai.com/blog/categories/technology/atom.xml" rel="self"/>
  <link href="http://vishnuatrai.com/"/>
  <updated>2014-04-25T14:31:39+05:30</updated>
  <id>http://vishnuatrai.com/</id>
  <author>
    <name><![CDATA[vishnuatrai.com]]></name>
    <email><![CDATA[me@vishnuatrai.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Critical Heartbleed Fix for SSL]]></title>
    <link href="http://vishnuatrai.com/blog/2014/04/11/critical-heartbleed-fix-for-ssl/"/>
    <updated>2014-04-11T15:30:33+05:30</updated>
    <id>http://vishnuatrai.com/blog/2014/04/11/critical-heartbleed-fix-for-ssl</id>
    <content type="html"><![CDATA[<p>OpenSSL heartbleed bug allows hackers to untraceably read server traffic and some server memory. This implementation mistake leads to the leak of memory information from the server to the client and from the client to the server. <!--more--></p>

<p>For my Ruby on Rails application deployed on AWS, the minimal steps I took to upgrade fixed OpenSSL version given below &ndash;</p>

<p>  1) Update OpenSSL to 1.0.1g</p>

<pre><code>download source from here http://www.openssl.org/source/openssl-1.0.1g.tar.gz
tar -zxf openssl-1.0.1g.tar.gz 
cd openssl-1.0.1g
./config
make
make test
make install

openssl version

if this will show older version then do below steps

ln -s /usr/local/ssl/bin/openssl /usr/bin/openssl
</code></pre>

<p>  2) Recompile/reinstall ruby with new openssl version</p>

<p>  3) Recompile/reinstall libriaries or gems those are related to openssl</p>

<p>  4) Reboot the server</p>

<p>  5) Regenerate new private key and csr to generate new SSL certificate</p>

<p>  6) Change server access keys and passwords</p>

<p>  7) Change API keys, passwords, tokens</p>

<p>  8) Cahnge session secret key for cookie based session store</p>

<p>  9) Restart the web and app servers</p>

<p>  10) You can ask your application users to change their password</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress: Migrate Disqus Comments From WordPress]]></title>
    <link href="http://vishnuatrai.com/blog/2014/04/02/octopress-migrate-disqus-comments-from-wordpress/"/>
    <updated>2014-04-02T12:08:35+05:30</updated>
    <id>http://vishnuatrai.com/blog/2014/04/02/octopress-migrate-disqus-comments-from-wordpress</id>
    <content type="html"><![CDATA[<p>Last week I migrated my blog from WordPress to Octopress and find it very cool blogging engine. Though, migraiton of posts and pages was quite easy but migration or you can say linking of Disqus comments from WorlPress pages to Octopress was difficult.<!--more--> I tried lot of different options but could not relink the Disqus comments.</p>

<p>Then I read the Disqus documentation and advanced migration options, and I found a options using that we can relink our comments properly to new bloging urls.</p>

<p>If you read Tools option under Discussion tab, you will find a option &ldquo;Upload a URL Map&rdquo;. There it says if your blog urls or slug was changed you can provide a CSV file which maps your old urls to new urls.( Left side old urls, Right side new urls)
In my case CSV file format was similar to given below format.</p>

<pre><code>http://vishnuatrai.com/?page_id=2, http://vishnuatrai.com/about/index.html
http://vishnuatrai.com/?p=115, http://vishnuatrai.com/blog/2010/10/12/managed-rake-tasks-rake-migration/
http://vishnuatrai.com/?p=132, http://vishnuatrai.com/blog/2010/11/01/why-nosql/
</code></pre>

<p>The Disqus Crawler runs and relink your comments to new urls.</p>

<h3>Reference</h3>

<p><a href="http://help.disqus.com/customer/portal/articles/286778-using-the-migration-tools">http://help.disqus.com/customer/portal/articles/286778-using-the-migration-tools</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress: Programmer Friendly Blogging]]></title>
    <link href="http://vishnuatrai.com/blog/2014/03/27/octopress-programmer-friendly-blogging/"/>
    <updated>2014-03-27T13:39:53+05:30</updated>
    <id>http://vishnuatrai.com/blog/2014/03/27/octopress-programmer-friendly-blogging</id>
    <content type="html"><![CDATA[<p>Nowadays blogs I am reading are mostly running with jekyll and using octopress to publish. Lot of my friends migrated from WordPress to Octopress. I was curious why they are doing so and what is the advantege with Octopress over WordPress.<!--more--> As an experiment I started developing a gihub pages application using Octopress and I found it very simple and easy to write. Good fit for my blog application.</p>

<h3>Why I like?</h3>

<p>  1) Free github/heroku hosting and easy deploy</p>

<p>  2) No database required( even for comments )</p>

<p>  3) Easy to intigrate and restore comments with disqus( till it is free )</p>

<p>  4) Don&rsquo;t need to move from your terminal to publish a blog</p>

<p>  5) Skill required &ndash; git, markdown, vim/emacs( any text editor )</p>

<p>  6) Lightweight and Fast running</p>

<p>  7) Lots of themes available</p>

<p>  8) etc etc etc ( still exploring )</p>

<h3>Reference</h3>

<p>  <a href="http://octopress.org/">http://octopress.org/</a></p>

<p>  <a href="http://opthemes.com/">http://opthemes.com/</a></p>

<p>  <a href="http://everythingisgray.com/2013/06/15/on-migrating-from-wordpress-to-octopress">http://everythingisgray.com/2013/06/15/on-migrating-from-wordpress-to-octopress</a></p>

<p>  <a href="http://zhen.org/blog/migrating-40000-posts-from-wordpress-to-octopress/">http://zhen.org/blog/migrating-40000-posts-from-wordpress-to-octopress/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jasmine: Ajax and Spies]]></title>
    <link href="http://vishnuatrai.com/blog/2012/04/06/jasmine-ajax-and-spies/"/>
    <updated>2012-04-06T11:12:46+05:30</updated>
    <id>http://vishnuatrai.com/blog/2012/04/06/jasmine-ajax-and-spies</id>
    <content type="html"><![CDATA[<p>In continuation of previous post for Jasmine, here I want to share my experience with Jasmine and Ajax. I want to show how cool it is with jasmine to test ajax calls in javascript. <!--more--> Jasmine spies can be used for mock the ajax call with fake data. Spy replaces the function it is spying on. For example my javascript function have an ajax call &ndash;</p>

<pre><code>function myprofiledetails(){
    $.ajax({
      type: "GET",
      url: "http://vishnuatrai.com/aboutme.php",
      success: function(json){
        $('#infodiv').html("Ruby On Rails development with jasmine");
      }
   });
}
</code></pre>

<p>In spec file I can spy the ajax call in beforeEach function. And so it won&rsquo;t make a server call and return the fake data.</p>

<pre><code>describe("mock about me", function() {

  beforeEach(function() {
    //mocking ajax call with Jasmine Spies
    var fakeData = "Hi, I am doing Ruby On Rails development with jasmine";
    spyOn($, "ajax").andCallFake(function(params) {
      params.success(fakeData);
    });
  });

  it("Should have a Happy Face", function() {
    myprofiledetails();
    expect($('#infodiv')).toHaveText("Ruby On Rails development with jasmine");
  });
});
</code></pre>

<p>Jasmine provides some useful methods to support spies.</p>

<pre><code>expect(x).toHaveBeenCalled()
passes if x is a spy and was called

expect(x).toHaveBeenCalledWith(arguments)
passes if x is a spy and was called with the specified arguments

expect(x).not.toHaveBeenCalled()                       
passes if x is a spy and was not called

expect(x).not.toHaveBeenCalledWith(arguments)   
passes if x is a spy and was not called with the specified arguments
</code></pre>

<p>Spies can be trained to respond in a variety of ways when invoked:</p>

<pre><code>spyOn(x, 'method').andCallThrough():
spies on AND calls the original function spied on

spyOn(x, 'method').andReturn(arguments):
returns passed arguments when spy is called

spyOn(x, 'method').andThrow(exception):
throws passed exception when spy is called

spyOn(x, 'method').andCallFake(function): 
calls passed function when spy is called
</code></pre>

<p>There is a detailed wiki page for spices on github <a href="https://github.com/pivotal/jasmine/wiki/Spies.">https://github.com/pivotal/jasmine/wiki/Spies.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jasmine: BDD for Javascript]]></title>
    <link href="http://vishnuatrai.com/blog/2012/03/12/jasmine-bdd-for-javascript/"/>
    <updated>2012-03-12T14:24:24+05:30</updated>
    <id>http://vishnuatrai.com/blog/2012/03/12/jasmine-bdd-for-javascript</id>
    <content type="html"><![CDATA[<p>In web development, if we are doing web 2.0 and modern web concepts, we have to write a lot of javascript and ajax calls and that will increase client side javascript day by day. <!--more--> We have lot of good javascript libraries for implementation. For faster delivery of features we need to cover the client side javascript with test cases. Jasmine is a tool to do BDD for javascript. It can mock ajax calls and you can use some static templates as a result. Jasmine also can be useful for TDD with javascript.</p>

<h4>1. Setting up a project</h4>

<p>To set up a project for javascript BDD, first of all you need to add <strong>&lsquo;jasmine&rsquo;</strong> to your gem file. Then after bundle install you will have to run a generator {<strong>rails g jasmine:install</strong>} to generate jasmine defaults. Now you can run command <strong>rake jasmine</strong> to see your spec on browser. The server run default on 8888 port. You can see your specs by browsing <a href="http://localhost:8888.">http://localhost:8888.</a> To write specs you can add a .js file in spec/javascripts/my_javascript_spec.js.</p>

<h4>2. Syntax</h4>

<p>Jasmine is very similar with rSpec in terms of syntax. It has methods like <strong>describe</strong> and <strong>it</strong>. Both functions take two arguments, first a string to show the context and second function to test the results. <strong>describe</strong> can be used for grouping related specs.</p>

<pre><code>describe('addition', function () {  
    it('adds two numbers', function () {  
        expect(5 + 5).toEqual(10);  
    });  
}); 
</code></pre>

<h4>3. Setup and Tear-down</h4>

<p>Jasmine provides function <strong>beforeEach</strong> for setup the spec context and <strong>afterEach</strong> to clear the context.</p>

<pre><code>describe("Spec setup and tear-down", function() {
  var number;
  beforeEach(function() {
    number = 0;
    number += 1;
  });

  afterEach(function() {
    number = 0;
  });

  it("first assertion", function() {
    expect(number).toEqual(1);              #green
  });

  it("second assertion", function() {
    expect(number).toEqual(1);              #green
  });
});
</code></pre>

<h4>4. Matchers</h4>

<p>Given few of the matches you can use for assertions &ndash;</p>

<pre><code>toContain
   expect(["linux", "mac", "windows"]).toContain("linux");  
toMatch
   expect(1050.50).toMatch(/\$\d*.\d\d/);
toBeLessThan
   expect(1).toBeLessThan(2);  
toBeGreaterThan
   expect(2).toBeGreaterThan(1);
toBeTruthy
  expect(true).toBeTruthy(); 
toBeFalsy
  expect(false).toBeFalsy();  

and a lot many.
</code></pre>

<h4>5. Custom Matchers</h4>

<p>We can write our own custom matcher using <strong>this.addMatchers</strong> in beforeEach call.</p>

<pre><code>beforeEach(function () {  
  this.addMatchers({  
    toBeBetween: function (floor, ceiling) {  
      return this.actual &gt; floor &amp;&amp; this.actual &lt; ceiling;  
    }  
  });  
});  
</code></pre>
]]></content>
  </entry>
  
</feed>
