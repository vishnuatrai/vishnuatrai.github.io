<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails&nbsp;6 | @vishnuatrai]]></title>
  <link href="http://vishnuatrai.in/blog/categories/rails-6/atom.xml" rel="self"/>
  <link href="http://vishnuatrai.in/"/>
  <updated>2020-04-29T19:54:44+05:30</updated>
  <id>http://vishnuatrai.in/</id>
  <author>
    <name><![CDATA[vishnuatrai.in]]></name>
    <email><![CDATA[vishnu.atrai@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What Is New in Rails 6]]></title>
    <link href="http://vishnuatrai.in/blog/2019/09/15/what-is-new-in-rails-6/"/>
    <updated>2019-09-15T14:09:12+05:30</updated>
    <id>http://vishnuatrai.in/blog/2019/09/15/what-is-new-in-rails-6</id>
    <content type="html"><![CDATA[<h4>Rails 6 require Ruby version 2.5 or greater. Upgrade to at least rails 5.2 or later versions and make sure application run properly without any failure, then attempt to upgrade to 6.0, follow <a href="https://edgeguides.rubyonrails.org/upgrading_ruby_on_rails.html#upgrading-from-rails-5-2-to-rails-6-0">upgrade guide</a>.</h4>

<h3>ApplicationRecord &ndash; Multiple databases support</h3>

<p>Active Record supports switching between multiple databases with a minimal change in codebase but a major impact on multiple replica set db. With multiple db support, rails application can have a read-only version of your database to use in areas known for having slow queries, or if it need to write to different databases depending on which controller request.
This requires a change in <code>database.yml</code> setup, ie. <!--more-->
`</p>

<pre><code>development:
  primary:
    database: primary_db
    user: rw_user
  primary_replica:
    database: primary_db
    user: ro_user
    replica: true
  animals:
    database: animals_db
    user: rw_user
  animals_replica
    database: animals_db
    user: ro_user
    replica: true
</code></pre>

<p>`
You can then specify at the model-level which database(s) you want to use:</p>

<pre><code>class Animal &lt; ApplicationRecord
    connects_to database: { writing: :animals, reading: :animals_replica }
end
</code></pre>

<p>And then it’s just one line of code to temporarily switch between databases inside a block!</p>

<pre><code>Aminal.connected_to(role: :reading) do
    #Slow queries in jobs can be performaed here
end
</code></pre>

<h3>Action Mailbox</h3>

<p>ActionMailbox provides a set of tools that will allow applications to route incoming mail into controller-like mailboxes for processing. Action Mailbox requires Active Job and Active Storage as part of it’s and a database table <code>InboundEmail</code>.</p>

<h4>Setup</h4>

<pre><code>bin/rails action_mailbox:install
bin/rails db:migrate
</code></pre>

<h4>Routing and Processing</h4>

<pre><code># app/mailboxes/application_mailbox.rb
class ApplicationMailbox &lt; ActionMailbox::Base
    routing /^comment\+(.+)@example\.com/i =&gt; :comments
end
# app/mailboxes/comments_mailbox.rb
class CommentsMailbox &lt; ApplicationMailbox
    def process
        user = User.find_by(email: mail.from)
        post_uuid = COMMENTS_REGEX.match(mail.to)[1]

        post = Post.find_by(uuid: post_uuid)
        post.comments.create(user: user, content: mail.body)
    end
end
</code></pre>

<h3>Action Text</h3>

<p>ActionText is am implementation of rich-text support(Trix editor by Basecamp). Run bin/rails action_text:install to add the Yarn package and copy over the necessary migration. Also, you need to set up Active Storage for embedded images and other attachments. Both trix and @rails/actiontext should be required in your JavaScript pack.</p>

<pre><code>// application.js
require("trix")
require("@rails/actiontext")
</code></pre>

<p>It exposes a has_rich_text method that we can apply to models and Action Text will take care of the rest.</p>

<pre><code># app/models/article.rb
class Article &lt; ApplicationRecord
    has_rich_text :content
end
</code></pre>

<h3>Parallel Testing</h3>

<p>Rails 6 adds parallel test to Rails applications by default. It parallelize test suite and enable faster test suite run times and efficiency. Configuration via parent test class</p>

<pre><code>class ActiveSupport::TestCase
    parallelize(workers: 2, with: :processes) # or :threads
end
</code></pre>

<p>or through environment variable PARALLEL_WORKERS and it’ll create the database with a numbered suffix.</p>

<pre><code>PARALLEL_WORKERS=2 rails test
</code></pre>

<h3>Action Cable Testing</h3>

<p>Action Cable testing tools allow you to test your Action Cable functionality at any level: connections, channels, broadcasts. By default, when you generate new Rails application with Action Cable, a test for the base connection class (<code>ApplicationCable::Connection</code>) is generated as well under <code>test/channels/application_cable</code> directory.</p>

<h3>Webpack</h3>

<p><code>webpacker</code> gem, replacing the previously-default Rails Asset Pipeline and providing for better interoperability with modern JavaScript libraries and coding standards. Using webpacker gem, all StyleSheets, images and JS libraries wrap into a single bundle with a single access point.</p>

<h3>Zeitwerk</h3>

<p>Zeitwerk is a new and improved, thread-safe code loader for Rails, Configuration to enable &ndash;</p>

<pre><code>config.autoloader = :zeitwerk
</code></pre>

<p><a href="https://edgeguides.rubyonrails.org/6_0_release_notes.html">https://edgeguides.rubyonrails.org/6_0_release_notes.html</a></p>
]]></content>
  </entry>
  
</feed>
