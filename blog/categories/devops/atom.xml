<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: DevOps | @vishnuatrai]]></title>
  <link href="http://vishnuatrai.in/blog/categories/devops/atom.xml" rel="self"/>
  <link href="http://vishnuatrai.in/"/>
  <updated>2020-04-04T16:37:47+05:30</updated>
  <id>http://vishnuatrai.in/</id>
  <author>
    <name><![CDATA[vishnuatrai.in]]></name>
    <email><![CDATA[vishnu.atrai@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MySQL - Encryption at Rest]]></title>
    <link href="http://vishnuatrai.in/blog/2020/01/11/mysql-encryption-at-rest/"/>
    <updated>2020-01-11T18:20:46+05:30</updated>
    <id>http://vishnuatrai.in/blog/2020/01/11/mysql-encryption-at-rest</id>
    <content type="html"><![CDATA[<p>Without encryption of data at rest, system role with access to file system can view data even without proper database permissions. A proper authentication can be used to protect data used by an application but data sitting in file system has been area of risk.</p>

<p>With encryption at rest, it has been possible to protect data in transit when moving over the network. Data at Rest Encryption is a requirement for HIPAA, PCI regulations. <!--more--></p>

<h3>Data Files at Risk</h3>

<p>When insert queries run to store data in tables, the data will be stored in respective <code>dataDir</code> ie <code>/usr/local/var/mysql</code>. A system user that has filesystem access can use <code>strings</code> or <code>xxd</code> commands to view content in data files, bin logs or redo logs.</p>

<p>One way to avoid this risk either not to store sensitive data in database or encrypt sensitive data columns or encrypt the file system itself.</p>

<p>Other way is to implement Data encryption at rest.</p>

<h3>Implement Data Encryption at rest, MySQL</h3>

<p>First step to create a key using <code>openssl</code> command</p>

<pre><code>openssl enc -aes-256-cbc -md sha1 -k &lt;enc password or passphase&gt; -in keys.txt -out mysql.enc
</code></pre>

<p>Second, edit <code>/etc/my.cnf</code> and provide encryption configurations</p>

<pre><code>plugin-load-add=file_key_management.so
file-key-management-filename=/var/lib/mysql/keys.txt
innodb-encrypt-tables
innodb-encrypt-log
encrypt-binlog
</code></pre>

<p><code>plugin-load-add</code> option will load the encryption plugin on mysql start.<br/>
<code>file-key-management-filename</code> option to provide reference to encryption key file.<br/>
<code>innodb-encrypt-tables</code> option will encrypt tables by default.<br/>
<code>innodb-encrypt-log</code> option will encrypt redo logs by default.<br/>
<code>encrypt-binlog</code> option will encrypt binlogs.</p>

<p>Third, restart mysql</p>

<pre><code>service mysql restart
</code></pre>

<p>Fourth, enable the same options on the replication slaves</p>

<p>Fifth, verify tables are encrypted using below mysql query</p>

<pre><code>select * from information_schema.INNODB_TABLESPACES_ENCRYPTION where ENCRYPTION_SCHEME=1;
</code></pre>

<br/>


<h3>innodb-encrypt-tables modes</h3>

<p>Three ways to encrypt tables<br/></p>

<ol>
<li><code>innodb-encrypt-tables</code> option in <code>my.cnf</code> will encrypt all tables unless table creation statement provided &ldquo;encrypted=no&rdquo; <br/></li>
<li><code>innodb-encrypt-tables</code> option in <code>my.cnf</code> will encrypt all tables and will not allow table creation with &ldquo;encrypted=no&rdquo; <br/></li>
<li><code>innodb-encrypt-tables</code> option is not provided in <code>my.cnf</code> but the plugin presents, it can explicitely encrypt a table by including &ldquo;encrypted=yes&rdquo; in table creation statement.<br/></li>
</ol>


<h3>Performance Overhead</h3>

<p>~5% to ~10% performance overhead observed in previous MySQL deployments with database enforced encryption mode.</p>

<p>Database-level encryption and selective tables encryption can be a better option than the filesystem-level encryption.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dive Into Docker Image Layers]]></title>
    <link href="http://vishnuatrai.in/blog/2019/12/26/dive-into-docker-image-layers/"/>
    <updated>2019-12-26T20:48:58+05:30</updated>
    <id>http://vishnuatrai.in/blog/2019/12/26/dive-into-docker-image-layers</id>
    <content type="html"><![CDATA[<p>I recently used a tool named <a href="https://github.com/wagoodman/dive"><code>dive</code></a> to explore docker images developed and maintained by teammates or opensourced docker images. I used to look into <code>Dockerfile</code> steps to explore image layes. <code>dive</code> brings cli-ui and using arrow and tab keys we can explore each layer in left pane while layer contents listed in right pane.<!--more--></p>

<p>Essentially <code>dive</code> based on docker api and its cache contents and provides commands to explore layer contents and minimize the size of images.</p>

<p>Installation</p>

<p><code>brew install dive</code></p>

<p>command to explore a image layers</p>

<p><code>dive &lt;docker-image-id&gt;</code></p>

<p>to build a image using <code>dive</code> command</p>

<p><code>dive build -t &lt;image-tag&gt; .</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jMeter - Optimize for Load Testing]]></title>
    <link href="http://vishnuatrai.in/blog/2019/11/11/jmeter-optimize-for-load-testing/"/>
    <updated>2019-11-11T17:40:57+05:30</updated>
    <id>http://vishnuatrai.in/blog/2019/11/11/jmeter-optimize-for-load-testing</id>
    <content type="html"><![CDATA[<p>These are the jMeter optimization steps we have taken to simulate 1M request per second concurrency test for REST application deployed on Kubernetes cluster.</p>

<h3>Use a High Capacity Jenkins Slave to run jMeter jmx script</h3>

<p>We have added a high capacity Jenkins slave node to run only jMeter performance test and have done jMeter installation on that server. All performance test jobs are restricted to run on that labeled slave node.<!--more-->
We can use available memory and CPU to optimize jMeter configuration.</p>

<h3>Run jMeter in non-GUI Mode</h3>

<p>Apart from developing jmx script or debugging request/response not use GUI mode to run load test. In GUI mode AWT Event Thread will disrupt both your test and JMeter in case of more or less high load. GUI mode consumes a lot of memory and other resources, which in turn negatively impacts your scripts and tests. Using the non-GUI mode of JMeter helps to reduce both resource requirements and potential errors.</p>

<h3>Increase the Java Heap Size</h3>

<p>Run JMeter with higher value of memory.</p>

<pre><code>`JVM_ARGS="-Xms512m -Xmx512m" jmeter.sh`
</code></pre>

<h3>Avoid Listeners</h3>

<p>Avoid UI listeners like graphs or results table to avoid OutOfMemory issues. Preferably only write results to a JTL.</p>

<h3>Minimize Metrics Need to Store</h3>

<p>Configure JMeter to ensure that it will only save the metrics that you absolutely need. You can control what to store by adding relevant lines to the user.properties file in jMeter installation.</p>

<h3>Generate Reports AFTER the Run</h3>

<p>It takes resources to be written (CPU and memory) and for analysis in XML format. Use the outputted .jtl files to create reports once the load test is finished. Building the report requires a great amount of CPU and memory resources.</p>

<h3>Tweak the JVM</h3>

<p>Settings like garbage collector (-XX:+UseConcMarkSweepGC), server JVM (-server) can be set inside JVM_ARGS by editing the JMeter launcher script.</p>

<p><code>NEW="-XX:NewSize=128m -XX:MaxNewSize=128m"</code> line in the JMeter command script should match with values provided in HEAP.</p>

<p><code>-XX:+UseConcMarkSweepGC</code> &ndash; this forces the usage of the CMS garbage collector. It will lower the overall throughput but leads to much shorter CPU intensive garbage collections.</p>

<p><code>-server</code> &ndash; this switches JVM into “server” mode with runtime parameters optimization. In this mode JMeter starts more slowly, but your overall throughput will be higher</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins Slave With Docker Executors]]></title>
    <link href="http://vishnuatrai.in/blog/2019/08/08/jenkins-slave-with-docker-executors/"/>
    <updated>2019-08-08T16:35:25+05:30</updated>
    <id>http://vishnuatrai.in/blog/2019/08/08/jenkins-slave-with-docker-executors</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.jenkins.io/display/JENKINS/Docker+Plugin">Docker Plugin</a> enables jenkins to run jobs as docker container. In such case we dont need to setup jenkins nodes(agents) with specific binaries, instead docker images will be used to run jobs.<!--more-->Jenkins master needs to be configured with docker host where we can push docker images, those will be used by agents to execute jobs.</p>

<h3>Global Configuration</h3>

<p>After installation of <code>Docker Plugin</code> from manage plugins options, we will need to configure docker host and templates to create docker executers in Global Configuration option.</p>

<p>Go to <strong>Global Configurations</strong> &ndash;> <strong>Docker</strong> &ndash;> fill the below configuration options to setup docker host <br />
<strong>Name</strong>    Name of docker slave to be used in job configuration  <br />
<strong>Docker Url</strong>    docker engine url and port  <br /></p>

<p><img src="/images//posts/Jenkins7.png" alt="" /></p>

<p><strong>Docker Template</strong>    docker template is an executor, we can add multiple templates and it will enable multiple executors  <br />
Fill below configurations to setup docker template <br /></p>

<ul>
<li><strong>Docker Image</strong> image name that that is available on docker host and having binaries to run the job</li>
<li><strong>Container Settings</strong> > <strong>Volumes</strong> Provide the container volumes(ie. <code>/home/dockerslave/bin</code>) where the binaries available, these are mapped with host machine and binaries will be available on host machine to run the job.</li>
<li><strong>Label</strong> Provide the label to uniquely identify the executor and configure in job configuration</li>
<li><strong>Launch Method</strong> select <strong>Docker ssh compute launcher</strong></li>
<li><strong>Credentials</strong> select credential id to ssh into docker host container</li>
</ul>


<p><img src="/images//posts/Jenkins4.png" alt="" />
<img src="/images//posts/Jenkins5.png" alt="" />
<img src="/images//posts/Jenkins6.png" alt="" /></p>

<h3>Job Configuration</h3>

<p><strong>Build</strong> > check <strong>Restrict where this project can be run</strong> > <strong>Label Expression</strong> > provide the docker template lable</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins - Add Slave Nodes as JNLP Agents]]></title>
    <link href="http://vishnuatrai.in/blog/2019/04/15/jenkins-add-slave-nodes-as-jnlp-agents/"/>
    <updated>2019-04-15T15:36:54+05:30</updated>
    <id>http://vishnuatrai.in/blog/2019/04/15/jenkins-add-slave-nodes-as-jnlp-agents</id>
    <content type="html"><![CDATA[<p>If it is required to run Jenkins master in an isolated network and master should not be allowed to connected to its nodes(agents), we can use JNLP method to add agents to master to process jobs in distributed manner. In this scenario, its not desirable to have master connections with slave(agent) nodes but agent to master connections only required. <!--more--></p>

<h3>Only Agent to master connections</h3>

<p>In this case the agent node will not be visible to the master, so the master can not initiate the agent process. You can use a different type of agent configuration in this case called &ldquo;JNLP&rdquo;. This means that the master does not need network &ldquo;ingress&rdquo; to the agent (but the agent will need to be able to connect back to the master). Handy for if the agents are behind a firewall, or perhaps in some more secure environment to do trusted deploys.</p>

<h3>Configuration</h3>

<p>In order to setup a slave agent in above scenario you need to first <strong>Enable the JNLP Agents</strong>:</p>

<p>Go to <strong>Manage Jenkins</strong> &ndash;> <strong>Configure Global Security</strong> &ndash;> under <strong>Agents</strong> section &ndash;> <strong>TCP port for inbound agents</strong> &ndash;> select <strong>Random</strong> &ndash;><strong>Save</strong>.</p>

<p><img src="/images//posts/Jenkins1.png" alt="" /></p>

<h4>Setup slave agent node</h4>

<p>Go to <strong>Manage Jenkins</strong> &ndash;> <strong>Manage Nodes</strong> &ndash;>click on <strong>New Node</strong> &ndash;> Enter the <strong>node name</strong> &ndash;> Select <strong>permanent agent</strong>.</p>

<p>Fill the below details to configure the slave agent</p>

<h4>Description</h4>

<h4>Remote root directory</h4>

<p>This should be the workspace directory on slave agent</p>

<h4>Label</h4>

<p>Provide the label to uniquely identify the slave node</p>

<h4>Launch Method</h4>

<p>Select <strong>launch agent by Connecting it to the master</strong> for windows agents  <br />
and <strong>launch agents via ssh</strong> for linux agents</p>

<p><img src="/images//posts/Jenkins2.png" alt="" /></p>

<p>To Launch the slave agent via command line  <br />
<strong>Download the agent.jar file and copy to agent node</strong>  <br />
<strong>Run agent.jar using command line</strong></p>

<pre><code>java --jar agent.jar -jnlpUrl &lt;jenkins master url&gt; -secret &lt;secret given on node configuration&gt; -workDir "/user/agent/home/workspace"
</code></pre>

<p><img src="/images//posts/Jenkins3.png" alt="" /></p>

<p>With above command agent is authorized and registered with jenkins master. Now agent is successfully configured and launched, which can be verified on master nodes. Jenkins master can delegate jobs to agent node.</p>
]]></content>
  </entry>
  
</feed>
