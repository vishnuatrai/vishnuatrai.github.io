<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@vishnuatrai]]></title>
  <link href="http://vishnuatrai.com/atom.xml" rel="self"/>
  <link href="http://vishnuatrai.com/"/>
  <updated>2017-05-10T17:28:27+05:30</updated>
  <id>http://vishnuatrai.com/</id>
  <author>
    <name><![CDATA[vishnuatrai.com]]></name>
    <email><![CDATA[me@vishnuatrai.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What is new in Rails 4.2]]></title>
    <link href="http://vishnuatrai.com/blog/2015/01/15/what-is-new-in-rails-4-dot-2/"/>
    <updated>2015-01-15T17:58:43+05:30</updated>
    <id>http://vishnuatrai.com/blog/2015/01/15/what-is-new-in-rails-4-dot-2</id>
    <content type="html"><![CDATA[<h3>Active Job</h3>

<p>Active Job is a framework for declaring jobs and making them run on a variety of queueing backends. These jobs can be everything from regularly scheduled clean-ups, to billing charges, to mailings. Anything that can be chopped up into small units of work and run in parallel.<!--more--></p>

<pre><code>class GuestsCleanupJob &lt; ActiveJob::Base
  queue_as :default

  def perform(*guests)
    # Do something later
  end
end

# Enqueue a job to be performed as soon the queuing system is free.
GuestsCleanupJob.perform_later guest

#Setting the Backend
# config/application.rb
module YourApp
  class Application &lt; Rails::Application
    # Be sure to have the adapter's gem in your Gemfile and follow
    # the adapter's specific installation and deployment instructions.
    config.active_job.queue_adapter = :sidekiq
  end
end
</code></pre>

<h3>Asynchronous Mails</h3>

<p>Building on top of Active Job, Action Mailer now comes with a <code>deliver_later</code> method that sends emails via the queue, so it doesn&rsquo;t block the controller or model if the queue is asynchronous (the default inline queue blocks).</p>

<p>Sending emails right away is still possible with <code>deliver_now</code>.</p>

<h3>Adequate Record</h3>

<p>Adequate Record is a set of performance improvements in Active Record that makes common find and find_by calls and some association queries up to 2x faster.</p>

<p>It works by caching common SQL queries as prepared statements and reusing them on similar calls, skipping most of the query-generation work on subsequent calls.</p>

<pre><code>Post.find(1)  # First call generates and cache the prepared statement
Post.find(2)  # Subsequent calls reuse the cached prepared statement

Post.find_by_title('first post')
Post.find_by_title('second post')

Post.find_by(title: 'first post')
Post.find_by(title: 'second post')

post.comments
post.comments(true)
</code></pre>

<p>Caching is not used in the following scenarios:</p>

<pre><code>- The model has a default scope
- The model uses single table inheritance
- find with a list of ids, eg.
    Post.find(1, 2, 3)
    Post.find([1,2])
- find_by with SQL fragments, eg.
    Post.find_by('published_at &lt; ?', 2.weeks.ago)
</code></pre>

<h3>Web Console</h3>

<p>Web Console adds an interactive Ruby console on every error page and provides a console view and controller helpers.</p>

<p>The interactive console on error pages lets you execute code in the context of the place where the exception originated. The console helper, if called anywhere in a view or controller, launches an interactive console with the final context, once rendering has completed.</p>

<h3>Foreign Key Support</h3>

<p>The migration DSL now supports adding and removing foreign keys. They are dumped to <code>schema.rb</code> as well. At this time, only the <code>mysql</code>, <code>mysql2</code> and <code>postgresql</code> adapters support foreign keys.</p>

<pre><code># add a foreign key to `articles.author_id` referencing `authors.id`
add_foreign_key :articles, :authors

# add a foreign key to `articles.author_id` referencing `users.lng_id`
add_foreign_key :articles, :users, column: :author_id, primary_key: "lng_id"

# remove the foreign key on `accounts.branch_id`
remove_foreign_key :accounts, :branches

# remove the foreign key on `accounts.owner_id`
remove_foreign_key :accounts, column: :owner_id
</code></pre>

<h3>References</h3>

<p><a href="http://guides.rubyonrails.org/4_2_release_notes.html">http://guides.rubyonrails.org/4_2_release_notes.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 2.2.0 Features]]></title>
    <link href="http://vishnuatrai.com/blog/2014/12/30/ruby-2-dot-2-features/"/>
    <updated>2014-12-30T17:53:04+05:30</updated>
    <id>http://vishnuatrai.com/blog/2014/12/30/ruby-2-dot-2-features</id>
    <content type="html"><![CDATA[<h3>1) Incremental and Symbol GC (RIncGC)</h3>

<p>Ruby 2.2.0 release includes several grabage collection (GC) improvements. Symbols are now garbage collectable.</p>

<p>Following the introduction of generational garbage collection in Ruby 2.1.0, which markedly improved the GC throughput, Ruby maintainers continue to introduce important changes in this space. The generational GC (RGenGC) classifies objects into generations, on the assumption that most objects die young. <!--more--> This assumption allows for high throughput and low pause time on younger objects, because older objects are only evaluated for deletion when there is no memory. But this means that older objects still suffer from high pause time.</p>

<p>The incremental GC (RIncGC), built on top of the generational GC, aims to cut that pause time while maintaining the same throughput. It achieves the shorter pause time by interleaving the mark phase, where objects are marked for GC, with Ruby&rsquo;s regular execution. Before Ruby 2.2.0, the mark phase was done in one big step.</p>

<h3>2) Rails 5.0 support</h3>

<p>Rails 5.0 will target Ruby 2.2+ exclusively. There are a bunch of optimizations coming in Ruby 2.2 that are going to be very nice, but most importantly for Rails, symbols are going to be garbage collected. This means we can shed a lot of weight related to juggling strings when we accept input from the outside world. It also means that we can convert fully to keyword arguments and all the other good stuff from the latest Ruby.</p>

<h3>3) Binding#local_variables</h3>

<p>To know the local variables defined in a scope use <code>binding.local_variables</code> that will give all variables in use.</p>

<pre><code>def m1(a, b)
  puts binding.local_variables
  c = a + b
  puts binding.local_variables
  c
end

irb(main):001&gt; m1(2,3)
[:a, :b, :c]
[:a, :b, :c]
=&gt;5
</code></pre>

<h3>4) Binding#receiver</h3>

<p>Ruby 2.2 provides a way to know which object is receiving the method call using <code>binding.receiver</code> method</p>

<pre><code>class Amimal
  def self.walk
    puts 'walk'
    binding.receiver
  end 
end

irb(main):001&gt; Amimal.walk
walk
=&gt;Animal

class Dog &lt; Animal
end 

irb(main):002&gt; Dog.walk
walk
=&gt;Dog
</code></pre>

<h3>5) Enumerable#slice_after</h3>

<p>This method is a complement to the existing <code>slice_before</code> method.</p>

<p>As the name suggests, <code>slice_before</code> is used to slice and dice enumerables. Given a way to match an element in the enumerable, it will find a match and cut it apart just prior to the match.</p>

<pre><code>irb(main):001&gt;[1, 'a', 2, 'b', 'c', 3, 'd', 'e', 'f'].slice_before { |e| e.is_a?(Integer) }.to_a
=&gt;[[1, "a"], [2, "b", "c"], [3, "d", "e", "f"]]
</code></pre>

<p><code>slice_after</code> does slices after instead:</p>

<pre><code>irb(main):002&gt;[1, 'a', 2, 'b', 'c', 3, 'd', 'e', 'f'].slice_after(Integer).to_a
=&gt;[[1], ["a", 2], ["b", "c", 3], ["d", "e", "f"]]
</code></pre>

<h3>6) Enumerable#slice_when</h3>

<p>A particularly fun addition is <code>slice_when</code>. Unlike <code>slice_after</code>, this method only accepts a block. It walks an enumerable, passing pairs of elements to the block. When the block returns <code>true</code>, the enumerable is sliced between the pair of elements:</p>

<pre><code>irb(main):001&gt;[1, 3, 4, 5, 7, 8, 9, 10, 12].slice_when { |a, b| a + 1 != b }.to_a
=&gt;[[1], [3, 4, 5], [7, 8, 9, 10], [12]]
</code></pre>

<h3>7) Float#next_float, Float#prev_float</h3>

<p>These functions return the next or previous representable float. Note the word “representable” in that sentence, not all floats can be represented.</p>

<pre><code>irb(main):001&gt;1.0.next_float
=&gt;1.0000000000000002

irb(main):002&gt;1.0.prev_float
=&gt;0.9999999999999999
</code></pre>

<h3>8) Kernel#itself</h3>

<p>Ruby went out and got itself an identity method. For those not familiar, an identity method returns the object it’s called on:</p>

<pre><code>irb(main):001&gt;1.itself
=&gt;1

irb(main):002&gt;[2, 3, 3, 1, 2, 3, 3, 1, 1, 2].group_by(&amp;:itself)
=&gt;{2=&gt;[2, 2, 2], 3=&gt;[3, 3, 3, 3], 1=&gt;[1, 1, 1]}
</code></pre>

<h3>8) Method#curry</h3>

<p>You might not have realized that Ruby is capable of currying and partial application. In the past, you could only call <code>curry</code> on a <code>Proc</code>. This same power is now available to you on <code>Method</code>.</p>

<pre><code>def sum(*args)
  args.reduce(:+)
end 

irb(main):001&gt;inc = method(:sum).curry(2).(1)
=&gt;#&lt;Proc:0x007fff322d7420 (lambda)&gt;
irb(main):002&gt;inc.(3)
=&gt;4
</code></pre>

<h3>9) Method#super_method</h3>

<p>Calling <code>super_method</code> returns the method that you would get if you called <code>super</code>. If the method has no parent, it returns <code>nil</code>.</p>

<pre><code>class Cat
  def speak
    'meow'
  end
end

class Tiger &lt; Cat
  def speak
    'roar'
  end
end

irb(main):001&gt;Tiger.new.method('speak')
=&gt;#&lt;Method: Tiger#speak&gt; 
irb(main):002&gt;Tiger.new.method('speak').super_method
=&gt;#&lt;Method: Cat#speak&gt;
irb(main):002&gt;Cat.new.method('speak').super_method
=&gt;nil
</code></pre>

<h3>10) Quoted symbol keys in hashes with a trailing colon</h3>

<p>Ruby 2.2 lets you create quoted symbol keys in hashes with a trailing colon:</p>

<pre><code>irb(main):001&gt;{ 'programming-language': :ruby }
</code></pre>

<h3>References</h3>

<p><a href="https://github.com/ruby/ruby/blob/v2_2_0/NEWS">https://github.com/ruby/ruby/blob/v2_2_0/NEWS</a></p>

<p><a href="https://www.ruby-lang.org/en/news/2014/12/25/ruby-2-2-0-released/">https://www.ruby-lang.org/en/news/2014/12/25/ruby-2-2-0-released/</a></p>

<p><a href="http://www.sitepoint.com/new-methods-ruby-2-2/">http://www.sitepoint.com/new-methods-ruby-2-2/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is new in Rails 4.1]]></title>
    <link href="http://vishnuatrai.com/blog/2014/05/31/what-is-new-in-rails-4-dot-1/"/>
    <updated>2014-05-31T19:59:28+05:30</updated>
    <id>http://vishnuatrai.com/blog/2014/05/31/what-is-new-in-rails-4-dot-1</id>
    <content type="html"><![CDATA[<p>Rails 4.1 is a minor release but includes interesting features below &ndash;</p>

<h3>Spring</h3>

<p>Spring is new application preloader(like spork and zeous) available by default<!--more-->
to rails app. Tests, rake and generators will be running much faster on large apps.</p>

<h3>Secrets</h3>

<p>New file config/secrets.yml for your sensitive data. It contains rails app default
secrets but you can add your secret keys here.</p>

<h3>Action Pack Variants</h3>

<p>Render different views, allows to have different templates and action responses for
the same mime type (say, HTML), even behave differently for phones, tablets and
desktop browsers. You can now have individual templates for the desktop, tablet,
and phone views while sharing all the same controller logic.</p>

<h3>ActionMailer Previews</h3>

<p>Sort of like LetterOpener and MailPreview, provide a way to visually see how emails
look by visiting a special URL that renders them. The preview is available in ie.
<a href="http://localhost:3000/rails/mailers/notifier/welcome,">http://localhost:3000/rails/mailers/notifier/welcome,</a> and a list of them in
<a href="http://localhost:3000/rails/mailers.">http://localhost:3000/rails/mailers.</a> By default, these preview classes live in
test/mailers/previews. This can be configured using the preview_path option.</p>

<h3>ActiveRecord enums</h3>

<p>Declare an enum attribute where the values map to integers in the database, but can
be queried by name. The good: Faster! Probably. It stores integers instead of strings.
You won&rsquo;t notice.</p>

<pre><code>class Conversation &lt; ActiveRecord::Base
  enum status: [ :active, :archived ]
end

conversation.archived!
Conversation.statuses # =&gt; { "active" =&gt; 0, "archived" =&gt; 1 }    
</code></pre>

<h3>Message Verifiers</h3>

<p>Message verifiers can be used to generate and verify signed messages. This can be
useful to safely transport sensitive data like remember-me tokens and friends.
The method Rails.application.message_verifier returns a new message verifier that
signs messages with a key derived from secret_key_base and the given message verifier name:</p>

<pre><code>signed_token = Rails.application.message_verifier(:remember_me).generate(token)
Rails.application.message_verifier(:remember_me).verify(signed_token) # =&gt; token

Rails.application.message_verifier(:remember_me).verify(tampered_token)
# raises ActiveSupport::MessageVerifier::InvalidSignature
</code></pre>

<h3>References</h3>

<p><a href="http://weblog.rubyonrails.org/2014/4/8/Rails-4-1/">http://weblog.rubyonrails.org/2014/4/8/Rails-4-1/</a></p>

<p><a href="http://edgeguides.rubyonrails.org/4_1_release_notes.html">http://edgeguides.rubyonrails.org/4_1_release_notes.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 2.1 Changelog]]></title>
    <link href="http://vishnuatrai.com/blog/2014/04/29/ruby-2-dot-1-changelog/"/>
    <updated>2014-04-29T12:01:04+05:30</updated>
    <id>http://vishnuatrai.com/blog/2014/04/29/ruby-2-dot-1-changelog</id>
    <content type="html"><![CDATA[<p>Ruby 2.1.0 has been released now question is, what&rsquo;s new in ruby 2.1.0. Below list of new
features introduced in ruby 2.1.0.</p>

<h3>1) def&rsquo;s return value <!--more--></h3>

<p>In earlier versions it was nil but in ruby 2.1 it will return a symbol.</p>

<pre><code>irb(main):002:0&gt; def my_method
irb(main):003:1&gt; end
=&gt; :my_method
</code></pre>

<h3>2) Rational Number and Complex Number Literals</h3>

<p>Earlier version you will have to use core classes to use relational and complex numbers,
ruby 2.1 gives r and i suffix for them. Older version will give error for these literals.</p>

<pre><code>irb(main):003:0&gt; (2+3i) + Complex(5, 4i)
=&gt; (3+3i)
</code></pre>

<h3>3) Required Keyword arguments</h3>

<p>Keyword arguments introduced by ruby 2.0 and there was no way to make them required.
In ruby 2.1 for missing keyword arguments it will raise
ArgumentError: missing keyword: keyword</p>

<pre><code>def permaliinkify(str:, delimiter: "-")
  str.downcase.split.join(delimiter)
end

irb(main):002:0&gt; permalinkify(delimiter: "-lol-")
ArgumentError: missing keyword: str
from (irb):LN
from /.rvm/2.1.0/bin/irb:11:in `&lt;main&gt;'
</code></pre>

<h3>4) Restricted Generational Garbage Collector (RGenGC)</h3>

<p>Ruby 2.1 introduced faster garbage collector RGenGC. That will make mark and sweep faster.
RGenGC design of garbage collector leverages the fact that most objects collected
by the garbage collector were the objects most recently created.</p>

<h3>5) Exception#cause</h3>

<p>Ruby 2.1 provides a way to have an exception carry a &ldquo;cause&rdquo; along with it.</p>

<pre><code>begin
  begin
    raise "Error!"
  rescue =&gt; e
    raise StandardError, "take the cause"
  end
rescue Exception =&gt; e
  puts "Caused by  : #{e.cause.message} [#{e.cause.class}]"
end
=&gt; Caused by  : Error! [RuntimeError]
</code></pre>

<h3>6) Refinements</h3>

<p>In ruby 2.1, Refinements provide an alternate way to scope our modifications in
ruby open classes or modules.</p>

<pre><code>module Permalinker
  refine String do
    def permalinkify
      downcase.split.join("-")
    end
  end
end

class Post
  using Permalinker
  def initialize(title)
    @title = title
  end
  def permalink
    @title.permalinkify
  end
end
irb(main):002:0&gt; post = Post.new("Ruby on Rails")
irb(main):002:0&gt; post.permalink
=&gt; "ruby-on-rails"
irb(main):023:0&gt; "ruby on rails".permalinkify
NoMethodError: undefined method `permalinkify' for "ruby on rails":String
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Critical Heartbleed fix for SSL]]></title>
    <link href="http://vishnuatrai.com/blog/2014/04/11/critical-heartbleed-fix-for-ssl/"/>
    <updated>2014-04-11T15:30:33+05:30</updated>
    <id>http://vishnuatrai.com/blog/2014/04/11/critical-heartbleed-fix-for-ssl</id>
    <content type="html"><![CDATA[<p>OpenSSL heartbleed bug allows hackers to untraceably read server traffic and some server memory. This implementation mistake leads to the leak of memory information from the server to the client and from the client to the server. <!--more--></p>

<p>For my Ruby on Rails application deployed on AWS, the minimal steps I took to upgrade fixed OpenSSL version given below &ndash;</p>

<p>  1) Update OpenSSL to 1.0.1g</p>

<pre><code>download source from here http://www.openssl.org/source/openssl-1.0.1g.tar.gz
tar -zxf openssl-1.0.1g.tar.gz 
cd openssl-1.0.1g
./config
make
make test
make install

openssl version

if this will show older version then do below steps

ln -s /usr/local/ssl/bin/openssl /usr/bin/openssl
</code></pre>

<p>  2) Recompile/reinstall ruby with new openssl version</p>

<p>  3) Recompile/reinstall libriaries or gems those are related to openssl</p>

<p>  4) Reboot the server</p>

<p>  5) Regenerate new private key and csr to generate new SSL certificate</p>

<p>  6) Change server access keys and passwords</p>

<p>  7) Change API keys, passwords, tokens</p>

<p>  8) Cahnge session secret key for cookie based session store</p>

<p>  9) Restart the web and app servers</p>

<p>  10) You can ask your application users to change their password</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress: Migrate Disqus Comments from WordPress]]></title>
    <link href="http://vishnuatrai.com/blog/2014/04/02/octopress-migrate-disqus-comments-from-wordpress/"/>
    <updated>2014-04-02T12:08:35+05:30</updated>
    <id>http://vishnuatrai.com/blog/2014/04/02/octopress-migrate-disqus-comments-from-wordpress</id>
    <content type="html"><![CDATA[<p>Last week I migrated my blog from WordPress to Octopress and find it very cool blogging engine. Though, migraiton of posts and pages was quite easy but migration or you can say linking of Disqus comments from WorlPress pages to Octopress was difficult.<!--more--> I tried lot of different options but could not relink the Disqus comments.</p>

<p>Then I read the Disqus documentation and advanced migration options, and I found a options using that we can relink our comments properly to new bloging urls.</p>

<p>If you read Tools option under Discussion tab, you will find a option &ldquo;Upload a URL Map&rdquo;. There it says if your blog urls or slug was changed you can provide a CSV file which maps your old urls to new urls.( Left side old urls, Right side new urls)
In my case CSV file format was similar to given below format.</p>

<pre><code>http://vishnuatrai.com/?page_id=2, http://vishnuatrai.com/about/index.html
http://vishnuatrai.com/?p=115, http://vishnuatrai.com/blog/2010/10/12/managed-rake-tasks-rake-migration/
http://vishnuatrai.com/?p=132, http://vishnuatrai.com/blog/2010/11/01/why-nosql/
</code></pre>

<p>The Disqus Crawler runs and relink your comments to new urls.</p>

<h3>Reference</h3>

<p><a href="http://help.disqus.com/customer/portal/articles/286778-using-the-migration-tools">http://help.disqus.com/customer/portal/articles/286778-using-the-migration-tools</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress: Programmer Friendly Blogging]]></title>
    <link href="http://vishnuatrai.com/blog/2014/03/27/octopress-programmer-friendly-blogging/"/>
    <updated>2014-03-27T13:39:53+05:30</updated>
    <id>http://vishnuatrai.com/blog/2014/03/27/octopress-programmer-friendly-blogging</id>
    <content type="html"><![CDATA[<p>Nowadays blogs I am reading are mostly running with jekyll and using octopress to publish. Lot of my friends migrated from WordPress to Octopress. I was curious why they are doing so and what is the advantege with Octopress over WordPress.<!--more--> As an experiment I started developing a gihub pages application using Octopress and I found it very simple and easy to write. Good fit for my blog application.</p>

<h3>Why I like?</h3>

<p>  1) Free github/heroku hosting and easy deploy</p>

<p>  2) No database required( even for comments )</p>

<p>  3) Easy to intigrate and restore comments with disqus( till it is free )</p>

<p>  4) Don&rsquo;t need to move from your terminal to publish a blog</p>

<p>  5) Skill required &ndash; git, markdown, vim/emacs( any text editor )</p>

<p>  6) Lightweight and Fast running</p>

<p>  7) Lots of themes available</p>

<p>  8) etc etc etc ( still exploring )</p>

<h3>Reference</h3>

<p>  <a href="http://octopress.org/">http://octopress.org/</a></p>

<p>  <a href="http://opthemes.com/">http://opthemes.com/</a></p>

<p>  <a href="http://everythingisgray.com/2013/06/15/on-migrating-from-wordpress-to-octopress">http://everythingisgray.com/2013/06/15/on-migrating-from-wordpress-to-octopress</a></p>

<p>  <a href="http://zhen.org/blog/migrating-40000-posts-from-wordpress-to-octopress/">http://zhen.org/blog/migrating-40000-posts-from-wordpress-to-octopress/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Object Oriented Programming]]></title>
    <link href="http://vishnuatrai.com/blog/2013/10/15/javascript-object-oriented-programming/"/>
    <updated>2013-10-15T18:00:18+05:30</updated>
    <id>http://vishnuatrai.com/blog/2013/10/15/javascript-object-oriented-programming</id>
    <content type="html"><![CDATA[<p>JavaScript is a prototype-based OOP language in which behaviour reuse
(inheritance) is achieved using existing objects which serve as prototypes. Whenever you
assign a object as prototype of other object, properties and methods will be available to
that object. <!--more-->You can override method or property in child object.</p>

<p>&ldquo;Everything&rdquo; in JavaScript is an Object. JavaScript allows you to define your own objects.
Objects are just data, with added properties and methods. This looks something similar to
ruby for me. Also root level prototype of a object is &ldquo;Object&rdquo; and prototype of &ldquo;Object&rdquo;
is null.</p>

<p>In this type of OOP languages there is no existences of classes like java. c#, ruby etc.
Here you create objects and inheritance you can achieve using prototype assignment.
Since only one prototype you can assign to a object so Javascript dosen&rsquo;t provide multiple
inheritence. Using prototype assignment chain to nexted level, it will provide multi-level
inheritence. eg</p>

<pre><code># A super class animal
function Animal(){
  this.legs = 0,
  this.word = '',
  this.walk = function(){
    var i = 0, s = '';
    for(; i &lt; this.legs; i++){
      s += ' step '
    }
    console.log(s);
  },
  this.speak = function(){
    console.log(this.word);
  }
};

a = new Animal();
a.walk()               =&gt; 
a.speak()              =&gt; 

# A child class human
function Human(){
  this.legs = 2,
  this.word = 'Hi'
};

Human.prototype = new Animal();

h = new Human();
h.walk()                =&gt; step step 
h.speak()               =&gt; Hi
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby for Multi-tenant SOA platform]]></title>
    <link href="http://vishnuatrai.com/blog/2013/08/02/multi-tenant-soa-platform-on-ruby-on-rails/"/>
    <updated>2013-08-02T18:03:45+05:30</updated>
    <id>http://vishnuatrai.com/blog/2013/08/02/multi-tenant-soa-platform-on-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>After cloud computing, Multi-tenancy and SOA become a buzzword for tech companies those provide B2B solutions.</p>

<p>Multi-tenancy will reduce the cost and simplifies the release management.<!--more--></p>

<p>On the other hand, SOA is to divide single monolithic application to multiple loosely coupled self contained independent applications aka services. SOA will benefit to develop new functions rapidly and scale platform in specific areas.</p>

<h3>Tools &amp; Tips for Multi-tenancy</h3>

<p>Database seperation for each client we are using apartment gem. That gives very easy interface
to manage seperate databases for different clients. To run background tasks we are using
apartment-sidekiq gem. That will automatically take care of database connection for a background
job initiated.</p>

<p>You add these gems in your Gemfile and good to go.</p>

<pre><code>gem 'apartment'
gem 'apartment-sidekiq'
</code></pre>

<h3>Tools and Tips for SOA (Service Oriented Architucture)</h3>

<p>To expose APIs you can use ruby lightwaight framework sinatra. ActiveRecord for ORM to backend
You can use rspec for testing framework. Sometimes you make multiple requests to different
services for a action, in these scenerios you can make parallel requests using typhoeus gem.
That will make a block call, get the response from different services, process those
responses and give back the result to end user. In your Gemfile you can add typhoeus.</p>

<pre><code>gem 'sinatra'
gem 'activerecord'
gem 'typhoeus'
</code></pre>

<p>You can use JSON responses for all your APIs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is new in Rails 4.0]]></title>
    <link href="http://vishnuatrai.com/blog/2013/07/18/what-is-new-in-rails-4-dot-0/"/>
    <updated>2013-07-18T19:58:40+05:30</updated>
    <id>http://vishnuatrai.com/blog/2013/07/18/what-is-new-in-rails-4-dot-0</id>
    <content type="html"><![CDATA[<p>Rails 4.0 and newer version will support ruby 1.9.3+ only. It wont work with lessor
version then ruby 1.9.3. Major developments are below &ndash;</p>

<h3>Ruby 2.0 preferred; 1.9.3+ required</h3>

<h3>Strong Parameters</h3>

<h3>Turbolinks</h3>

<h3>Russian Doll Caching</h3>

<h3>Live Streaming</h3>

<h3>Rails Queue</h3>

<h3>Asynchronous Action Mailer</h3>

<h3>Barebone Models &ndash; ActiveModel::Model</h3>

<h3>Http PATCH</h3>

<h3>Custom Flash Types</h3>

<h3>Flush content_for blocks</h3>

<h3>Rounting Concerns</h3>

<h3>Multiple Route Files</h3>

<h3>PostgreSQL Array Support</h3>

<h3>Page and Action Caching</h3>

<h3>Cache Digest</h3>

<h3>Controller Wise ETags</h3>

<h3>where.not and Chainable relation.none and Relation._!</h3>

<h3>Action Callbacks Renamed</h3>

<h3>Default Index Page</h3>

<h3>HTML5 Input Helpers</h3>

<h3>Models Concerns</h3>

<h3>vendor/plugins and Ruby 1.9.3 Lesser Banned!</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4 - ActiveSupport::Concern]]></title>
    <link href="http://vishnuatrai.com/blog/2013/06/24/rails-4-activesupport-concern/"/>
    <updated>2013-06-24T18:00:23+05:30</updated>
    <id>http://vishnuatrai.com/blog/2013/06/24/rails-4-activesupport-concern</id>
    <content type="html"><![CDATA[<p>Rails 4 ActiveSupport::Concern is a very cool feature to organize your module in such a way
that when you include module in a class you don&rsquo;t need to write extra callbacks to extend or
include methods in your class. This feature is a great way to keep your code organized and DRY. This handles module dependencies also.</p>

<!--more-->


<p>You just need to require activesupport/concern and need to extend your module with ActiveSupport::Concern.
When you include your module in a class, included block will be executed with in class
context, ClassMethods block will be added to class itself and methods inside will become
class methods, other methods outside included and ClassMethods block will be included as
instance methods. eg.</p>

<pre><code>module Commentable
  extend ActiveSupport::Concern

  included do         # This block will be executed within class itself
    has_many :comments, as: :commentable, dependent: :destroy
    scope :with_comments, -&gt;{ joins(:comments) }
  end 

  module ClassMethods # Methods within this black will be added to class methods
    def comment_search(params)
      .....
    end
  end

  def comment_titles  # This method will be added to instance methods
    comments.map(&amp;:title) 
  end      
  def comment_users   # This method will be added to instance methods
    comments.map(&amp;:username)
  end

end
</code></pre>

<p>This should be your module structure and when you include your module in class it will work.
No method will break. eg.</p>

<pre><code>Class Post
  include Commentable
end

Post.with_comments  
Post.comment_search({}) 

p = Post.find(1)
p.comments
p.comment_titles
p.comment_users
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 2.0.0 Changelog]]></title>
    <link href="http://vishnuatrai.com/blog/2013/04/05/ruby-2-dot-0-0-changelog/"/>
    <updated>2013-04-05T12:43:25+05:30</updated>
    <id>http://vishnuatrai.com/blog/2013/04/05/ruby-2-dot-0-0-changelog</id>
    <content type="html"><![CDATA[<p>Ruby 2.0 has been released now question is, what’s new in ruby 2.0. Below list of new features
introduced in ruby 2.0.</p>

<h3>1) Keyword arguments <!--more--></h3>

<h3>2) Module#prepend</h3>

<h3>3) Enumerable#lazy</h3>

<h3>4) Refinements</h3>

<h3>5) %i and %I symbol array literal</h3>

<h3>6) Array#bsearch and Range#bsearch</h3>

<h3>7) Garbage collection improvements</h3>

<h3>8) Default UTF-8 encoding</h3>

<h3>9) <strong>DIR</strong> Keyword</h3>

<h3>10) TracePoint</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jasmine: Ajax and Spies]]></title>
    <link href="http://vishnuatrai.com/blog/2012/04/06/jasmine-ajax-and-spies/"/>
    <updated>2012-04-06T11:12:46+05:30</updated>
    <id>http://vishnuatrai.com/blog/2012/04/06/jasmine-ajax-and-spies</id>
    <content type="html"><![CDATA[<p>In continuation of previous post for Jasmine, here I want to share my experience with Jasmine and Ajax. I want to show how cool it is with jasmine to test ajax calls in javascript. <!--more--> Jasmine spies can be used for mock the ajax call with fake data. Spy replaces the function it is spying on. For example my javascript function have an ajax call &ndash;</p>

<pre><code>function myprofiledetails(){
    $.ajax({
      type: "GET",
      url: "http://vishnuatrai.com/aboutme.php",
      success: function(json){
        $('#infodiv').html("Ruby On Rails development with jasmine");
      }
   });
}
</code></pre>

<p>In spec file I can spy the ajax call in beforeEach function. And so it won&rsquo;t make a server call and return the fake data.</p>

<pre><code>describe("mock about me", function() {

  beforeEach(function() {
    //mocking ajax call with Jasmine Spies
    var fakeData = "Hi, I am doing Ruby On Rails development with jasmine";
    spyOn($, "ajax").andCallFake(function(params) {
      params.success(fakeData);
    });
  });

  it("Should have a Happy Face", function() {
    myprofiledetails();
    expect($('#infodiv')).toHaveText("Ruby On Rails development with jasmine");
  });
});
</code></pre>

<p>Jasmine provides some useful methods to support spies.</p>

<pre><code>expect(x).toHaveBeenCalled()
passes if x is a spy and was called

expect(x).toHaveBeenCalledWith(arguments)
passes if x is a spy and was called with the specified arguments

expect(x).not.toHaveBeenCalled()                       
passes if x is a spy and was not called

expect(x).not.toHaveBeenCalledWith(arguments)   
passes if x is a spy and was not called with the specified arguments
</code></pre>

<p>Spies can be trained to respond in a variety of ways when invoked:</p>

<pre><code>spyOn(x, 'method').andCallThrough():
spies on AND calls the original function spied on

spyOn(x, 'method').andReturn(arguments):
returns passed arguments when spy is called

spyOn(x, 'method').andThrow(exception):
throws passed exception when spy is called

spyOn(x, 'method').andCallFake(function): 
calls passed function when spy is called
</code></pre>

<p>There is a detailed wiki page for spices on github <a href="https://github.com/pivotal/jasmine/wiki/Spies.">https://github.com/pivotal/jasmine/wiki/Spies.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jasmine: BDD for Javascript]]></title>
    <link href="http://vishnuatrai.com/blog/2012/03/12/jasmine-bdd-for-javascript/"/>
    <updated>2012-03-12T14:24:24+05:30</updated>
    <id>http://vishnuatrai.com/blog/2012/03/12/jasmine-bdd-for-javascript</id>
    <content type="html"><![CDATA[<p>In web development, if we are doing web 2.0 and modern web concepts, we have to write a lot of javascript and ajax calls and that will increase client side javascript day by day. <!--more--> We have lot of good javascript libraries for implementation. For faster delivery of features we need to cover the client side javascript with test cases. Jasmine is a tool to do BDD for javascript. It can mock ajax calls and you can use some static templates as a result. Jasmine also can be useful for TDD with javascript.</p>

<h4>1. Setting up a project</h4>

<p>To set up a project for javascript BDD, first of all you need to add <strong>&lsquo;jasmine&rsquo;</strong> to your gem file. Then after bundle install you will have to run a generator {<strong>rails g jasmine:install</strong>} to generate jasmine defaults. Now you can run command <strong>rake jasmine</strong> to see your spec on browser. The server run default on 8888 port. You can see your specs by browsing <a href="http://localhost:8888.">http://localhost:8888.</a> To write specs you can add a .js file in spec/javascripts/my_javascript_spec.js.</p>

<h4>2. Syntax</h4>

<p>Jasmine is very similar with rSpec in terms of syntax. It has methods like <strong>describe</strong> and <strong>it</strong>. Both functions take two arguments, first a string to show the context and second function to test the results. <strong>describe</strong> can be used for grouping related specs.</p>

<pre><code>describe('addition', function () {  
    it('adds two numbers', function () {  
        expect(5 + 5).toEqual(10);  
    });  
}); 
</code></pre>

<h4>3. Setup and Tear-down</h4>

<p>Jasmine provides function <strong>beforeEach</strong> for setup the spec context and <strong>afterEach</strong> to clear the context.</p>

<pre><code>describe("Spec setup and tear-down", function() {
  var number;
  beforeEach(function() {
    number = 0;
    number += 1;
  });

  afterEach(function() {
    number = 0;
  });

  it("first assertion", function() {
    expect(number).toEqual(1);              #green
  });

  it("second assertion", function() {
    expect(number).toEqual(1);              #green
  });
});
</code></pre>

<h4>4. Matchers</h4>

<p>Given few of the matches you can use for assertions &ndash;</p>

<pre><code>toContain
   expect(["linux", "mac", "windows"]).toContain("linux");  
toMatch
   expect(1050.50).toMatch(/\$\d*.\d\d/);
toBeLessThan
   expect(1).toBeLessThan(2);  
toBeGreaterThan
   expect(2).toBeGreaterThan(1);
toBeTruthy
  expect(true).toBeTruthy(); 
toBeFalsy
  expect(false).toBeFalsy();  

and a lot many.
</code></pre>

<h4>5. Custom Matchers</h4>

<p>We can write our own custom matcher using <strong>this.addMatchers</strong> in beforeEach call.</p>

<pre><code>beforeEach(function () {  
  this.addMatchers({  
    toBeBetween: function (floor, ceiling) {  
      return this.actual &gt; floor &amp;&amp; this.actual &lt; ceiling;  
    }  
  });  
});  
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving to Ruby and Rails Edge]]></title>
    <link href="http://vishnuatrai.com/blog/2012/01/18/moving-to-ruby-and-rails-edge/"/>
    <updated>2012-01-18T15:25:34+05:30</updated>
    <id>http://vishnuatrai.com/blog/2012/01/18/moving-to-ruby-and-rails-edge</id>
    <content type="html"><![CDATA[<p>Since our team always works with technology edge whether it is rails or ruby, from last week we started moving to ruby 1.9.3 and rails 3.1.3. I am sharing our experiences we found during migrating our product to rails and ruby latest release.<!--more--></p>

<h5>Ruby-1.9.3 Upgrade</h5>

<p>Compare to ruby 1.8.7 in ruby 1.9.3 there are lot of changes, newly introduced, and things taken away, some of them are here &ndash;</p>

<h4>1) Load path not including the working directory</h4>

<pre><code>require_relative or require './file'
</code></pre>

<h4>2)New Hash syntax – without hash-rockets(=>)</h4>

<pre><code>{ name: 'vishnu', age: '26'}
</code></pre>

<h4>3)Character Encoding – more encoding support for other char-sets</h4>

<p>cp950, cp951, UTF-16, and UTF-32 etc.</p>

<h4>4)Array – to_s no longer joins elements, but returns and inspect style representation</h4>

<p>choice method goes to sample method
method nitems removed</p>

<h4>5)Procs and Lambdas – proc {} creates a Proc object instead lambda</h4>

<pre><code> proc {}.lambda?          #=&gt; false
 lambda {}.lambda?        #=&gt; true
</code></pre>

<p>source_location method gives file_name, line_number of proc</p>

<h4>6)Time – Time standard library changed</h4>

<p>Time.parse uses dd/mm/yyyy format instead of mm/dd/yyyy
Time monday?, tuesday?, wednesday?, thursday?, friday?, saturday? sunday? Available to check a day</p>

<h4>7)New in Standard Library1.9.3</h4>

<p>json, to_json and JSON.load(data) method is available with objects
minitest MiniTest and MiniTest::Spec
prime – Prime number library</p>

<pre><code>7.prime?          #=&gt; true
6.prime?          #=&gt; false
</code></pre>

<h4>8)Removed from Standard Library 1.9.3</h4>

<p>soap/wsdlDriver, date2, ftools,jcode(removed because now encoding support), parsedate, rubyunit</p>

<h5>Rails-3.1.3 Upgrade</h5>

<p>In order to upgrade to Rails 3.1.3 version with ruby 1.9.3 here are some points, those can help you &ndash;</p>

<h4>1)To support special characters in your ruby code</h4>

<p>Put {# &ndash;<em>&ndash; coding: utf-8 &ndash;</em>&ndash;} beginning of the file and
configuration in application.rb for default encoding. config.encoding = &ldquo;utf-8&rdquo;</p>

<h4>2)Capybara should upgrade to 1.1.2 version and cucumber with 1.1.2 version</h4>

<p>regenerate cucumber environment with required options</p>

<pre><code>bundle exec rails g cucumber:install --capybara –rspec
</code></pre>

<h4>3)By default ActiveResource uses JSON format</h4>

<p>To make default XML format specify format in initializers</p>

<pre><code>ActiveResource::Base.format = ActiveResource::Formats::XmlFormat
</code></pre>

<h4>4)To load all helpers in each controller/action specify config</h4>

<pre><code>config.action_controller.include_all_helpers = true   in application.rb
instead
helpers :all in application_controller.rb
</code></pre>

<h4>5)To load test_helper.rb in all test specs, use</h4>

<pre><code>require './test/test_helper'
instead
require File.dirname(__FILE__) + '/../test_helper'
</code></pre>

<h4>6)RJS template fix</h4>

<p>RJS template and rjs code in controller is not supported, changed to .html.js template. For a quick fix you can use prototype-rails gem in Gemfile</p>

<pre><code>gem 'prototype-rails'     #Gemfile
</code></pre>

<p>prototype-rails do not use prototype.js it provides helper methods to support rjs templates. later on you can migrate all .rjs to .js</p>

<h4>7) Enable assets pipeline</h4>

<p>To enable assets pipeline, an import feature of rails 3.1, you need to set application.rb with configurations-</p>

<pre><code>config.assets.enabled = true
config.assets.initialize_on_precompile = false
</code></pre>

<p>and production.rb with configurations &ndash;</p>

<pre><code>config.assets.compress = true
config.assets.compile = true
config.assets.digest = false
config.assets.js_compressor  = :uglifier
</code></pre>

<p>and gemfile should have a group :assets and should include saas-rails, coffee-rails, uglifier gems.</p>

<pre><code>group :assets do
  gem 'sass-rails',   "~&gt; 3.1.0"
  gem 'coffee-rails', "~&gt; 3.1.0"
  gem 'uglifier'
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 1.9.3 Changelog]]></title>
    <link href="http://vishnuatrai.com/blog/2011/11/05/ruby-1-dot-9-3-changelog/"/>
    <updated>2011-11-05T12:52:27+05:30</updated>
    <id>http://vishnuatrai.com/blog/2011/11/05/ruby-1-dot-9-3-changelog</id>
    <content type="html"><![CDATA[<p>Ruby 1.9.3 has been released now question is, what’s new in ruby 1.9.3. Below list of new
features introduced in ruby 1.9.3.</p>

<h3>1) Objects hieararchy <!--more--></h3>

<h3>2) Fibers</h3>

<h3>3) New character encodings</h3>

<h3>4) Faster loading &ndash; the load.c patch</h3>

<h3>5) Hashes syntax</h3>

<h3>6) Improved GC performance with a lazy garbage collector</h3>

<h3>7) A &lsquo;better strategy&rsquo; for the GIL / GVL</h3>

<h3>8) Test/unit supports parallel testing</h3>

<h3>9) Random.rand tweaks (and rand() now accepts ranges)</h3>

<h3>10) Main changes</h3>

<p>The other main areas where changes were introduced: symbols, arrays,
hashes and blocks.</p>

<p>New method tap has been released to improve chain methods.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails::Railtie – Hook Everything]]></title>
    <link href="http://vishnuatrai.com/blog/2011/07/31/railsrailtie-e28093-hook-everything/"/>
    <updated>2011-07-31T17:33:44+05:30</updated>
    <id>http://vishnuatrai.com/blog/2011/07/31/railsrailtie-e28093-hook-everything</id>
    <content type="html"><![CDATA[<p>After Rails 3 released I have been trying to find major and important changes in rails framework over 2.x version. The change I like most is Rails Railtie. Using Railtie you can configure your own gem or plugin in a rails application according to your choice in boot process. <!--more-->  If you are a plugin developer, you can use Railtie class that is capable of loading generators, tasks, middlewares and adding subscribers.</p>

<p>Rails::Engine is nothing more than a Railtie and it has some initializers already set and Rails::Application and Rails::Plugin are also engines. Any subclass of Railtie can be use to initialize rails application, so your plugin can be a first class member of rails application.</p>

<p>Here is sample plugin Railtie that will be loaded when your rails application boots.</p>

<pre><code>require 'rails'
class MyPlugin &lt; Rails::Railtie
  # railtie code goes here
end
</code></pre>

<p>Here I will give you some examples of Railtie methods, how to customize and extend your rails application using your plugin or gem library.</p>

<h4>1) generators</h4>

<p>Rails will require any generators if you have require generator path in your Railtie class within generators block.</p>

<pre><code>generators do
  require 'lib/to/generator.rb'
end
</code></pre>

<h4>2) rake_tasks</h4>

<p>You can ship rake tasks of your plugin in rails application if you require in Railtie</p>

<pre><code>rake_tasks do 
  require 'lib/to/rake_task.rb'
end
</code></pre>

<h4>3) initializer</h4>

<p>Railtie initializer method can create initializers that can run during the Rails boot process. It has the options to run a initializer before or after a specific initializer.</p>

<pre><code>initializer "plugin_railtie.boot_plugin" do
  Plugin.boot(NewPlugin)
end

initializer "new_plugin_railtie.boot_new_plugin", :before =&gt; "plugin_railtie.boot_plugin" do
    NewPlugin.boot!
end
</code></pre>

<h4>4) console</h4>

<p>console method allows to add code that will run when Rails console starts.</p>

<pre><code> console do
   puts "my plugin loaded."
 end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 3 – ActiveModel Basics]]></title>
    <link href="http://vishnuatrai.com/blog/2011/03/17/rails-3-e28093-activemodel/"/>
    <updated>2011-03-17T22:55:31+05:30</updated>
    <id>http://vishnuatrai.com/blog/2011/03/17/rails-3-e28093-activemodel</id>
    <content type="html"><![CDATA[<p>Hey Guys,</p>

<p>It is long time to write something, since I was busy with some open-source stuff. Over last two weeks we were migrating an application from rails 2.x version to rails 3.x. In that application we had lot of ActiveResource classes and other classes, and in those classes we need to validate some attributes and also we need to wrap call backs around some methods in ActiveRecord style. <!--more--> In earlier 2.x rails version we had to write some code for validation and  call back that was written us.</p>

<p>During the migration from 2.x version to rails 3, we got to know about ActiveModel module that will give you lot of features in ActiveRecord style.</p>

<p>Here, I am sharing my experiences with ActiveModel &ndash;</p>

<p>ActiveModel is a nice library provided by Rails 3, by using that any ruby object can behave like a ActiveRecord class object. Some of ActiveModel API explained below &ndash;</p>

<h4>1.1 AttributeMethods</h4>

<p>AttributeMethods module can add custom prefixes and suffixes on  methods of a class. It is used by defining the prefixes and suffixes,  which methods on the object will use them.</p>

<pre><code>class Person
  include ActiveModel::AttributeMethods

  attribute_method_prefix 'reset_'
  attribute_method_suffix '_highest?'
  define_attribute_methods ['age']

  attr_accessor :age

private
  def reset_attribute(attribute)
    send("#{attribute}=", 0)
  end

  def attribute_highest?(attribute)
    send(attribute) &gt; 100 ? true : false
  end

end

person = Person.new
person.age = 110
person.age_highest?  # true
person.reset_age     # 0
person.age_highest?  # false
</code></pre>

<h4>1.2 Callbacks</h4>

<p>Callbacks gives Active Record style callbacks. This provides the  ability to define the callbacks and those will run at appropriate time.  After defining a callbacks you can wrap with before, after and around  custom methods.</p>

<pre><code>class Person
  extend ActiveModel::Callbacks

  define_model_callbacks :update

  before_update :reset_me

  def update
    _run_update_callbacks do
      # This will call when we are trying to call update on object.
    end
  end

  def reset_me
    # This method will call when you are calling update on object as a before_update callback as defined.
  end
end
</code></pre>

<h4>1.3 Conversion</h4>

<p>If a class defines persisted? and id methods then you can include  Conversion module in that class and you can able to call Rails  conversion methods to objects of that class.</p>

<pre><code>class Person
  include ActiveModel::Conversion

  def persisted?
    false
  end

  def id
    nil
  end
end

person = Person.new
person.to_model == person  #=&gt; true
person.to_key              #=&gt; nil
person.to_param            #=&gt; nil
</code></pre>

<h4>1.4 Dirty</h4>

<p>An object becomes dirty when an object is gone through one or more  changes to its attributes and not yet saved. This gives the ability to  check whether an object has been changed or not. It also has attribute  based accessor methods. Lets consider a Person class with attributes  first_name and last_name</p>

<pre><code>require 'rubygems'
require 'active_model'

class Person
  include ActiveModel::Dirty
  define_attribute_methods [:first_name, :last_name]

  def first_name
    @first_name
  end

  def first_name=(value)
    first_name_will_change!
    @first_name = value
  end

  def last_name
    @last_name
  end

  def last_name=(value)
    last_name_will_change!
    @last_name = value
  end

  def save
    @previously_changed = changes
  end

end
</code></pre>

<h5>1.4.1 Querying object directly for its list of all changed attributes.</h5>

<pre><code>person = Person.new
person.first_name = "First Name"

person.first_name #=&gt; "First Name"
person.first_name = "First Name Changed"

person.changed? #=&gt; true

#returns an list of fields arry which all has been changed before saved.
person.changed #=&gt; ["first_name"]

#returns a hash of the fields that have changed with their original values.
person.changed_attributes #=&gt; {"first_name" =&gt; "First Name Changed"}

#returns a hash of changes, with the attribute names as the keys, and the values will be an array of the old and new value for that field.
person.changes #=&gt; {"first_name" =&gt; ["First Name","First Name Changed"]}
</code></pre>

<h5>1.4.2 Attribute based accessor methods</h5>

<p>Track whether the particular attribute has been changed or not.</p>

<pre><code>#attr_name_changed?
person.first_name #=&gt; "First Name"

#assign some other value to first_name attribute
person.first_name = "First Name 1"

person.first_name_changed? #=&gt; true
</code></pre>

<p>Track what was the previous value of the attribute.</p>

<pre><code>#attr_name_was accessor
person.first_name_was  #=&gt; "First Name"
</code></pre>

<h5>Track  both previous and current value of the changed attribute. Returns an array if changed else returns nil</h5>

<pre><code>#attr_name_change
person.first_name_change #=&gt; ["First Name", "First Name 1"]
person.last_name_change #=&gt; nil
</code></pre>

<h4>1.5 Validations</h4>

<p>Validations module adds the ability to class objects to validate them in Active Record style.</p>

<pre><code>class Person
  include ActiveModel::Validations

  attr_accessor :name, :email

  validates :name, :presence =&gt; true
  validates_format_of :email, :with =&gt; /^([^\s]+)((?:[-a-z0-9]\.)[a-z]{2,})$/i 

end

person = Person.new
person.valid?                        #=&gt; false
person.name  = 'vishnu'
person.email  = 'me'
person.valid?                        #=&gt; false
person.email = 'me@vishnuatrai.com'
person.valid?                        #=&gt; true
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MapReduce: Reduce Analytical Data Processing]]></title>
    <link href="http://vishnuatrai.com/blog/2011/02/16/mapreduce-tool-to-reduce-analytical-data-processing/"/>
    <updated>2011-02-16T22:54:29+05:30</updated>
    <id>http://vishnuatrai.com/blog/2011/02/16/mapreduce-tool-to-reduce-analytical-data-processing</id>
    <content type="html"><![CDATA[<p>Today every human being is rapidly increasing online activities and as a result web applications are having a huge amounts of data, now it is a challenge for organizations to quickly analyze the huge amounts of data their customers and audiences generate to better understand and serve them.<!--more--> MapReduce is the tool that is helping those organizations.</p>

<p>MapReduce is a programming framework popularized by Google and used to simplify data processing across massive data sets.</p>

<p>Enterprise implementation of MapReduce can be found in Hadoop, which uses HDFS to store unstructured data (file system) and uses the power of MapReduce to parallelize the processing of this data. Hadoop is suited for non time-sensitive batch jobs involving large-scale datasets.</p>

<p>With MapReduce, computational processing can occur on data stored either in a filesystem (unstructured) or within a database (structured).</p>

<p>There are two fundamental pieces of a MapReduce query:</p>

<h4>Map</h4>

<p>The master node takes the input, chops it up into smaller sub-problems, and distributes those to worker nodes. A worker node may do this again in turn, leading to a multi-level tree structure. The worker node processes that smaller problem, and passes the answer back to its master node.</p>

<h4>Reduce</h4>

<p>The master node then takes the answers to all the sub-problems and combines them in a way to get the output &ndash; the answer to the problem it was originally trying to solve.</p>

<h3>Benefits of MapReduce</h3>

<p>First, the model is easy to use, even for programmers without experience with distributed systems, since it hides the details of parallelization, fault-tolerance, locality optimization, and load balancing. MapReduce allows developers to write applications in their language of choice while handling the details of parallelization behind the scenes.</p>

<p>Second, a large variety of problems are easily expressible as MapReduce computations.
For example, MapReduce is used for the generation of data for Google&rsquo;s production web search service, for sorting, for data mining, for machine learning, and many other systems.</p>

<p>Third, MapReduce enables scaling of applications across large clusters of machines comprising thousands of nodes, with fault-tolerance built-in for ultra-fast performance.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB V/S CouchDB]]></title>
    <link href="http://vishnuatrai.com/blog/2011/01/12/mongodb-vs-couchdb/"/>
    <updated>2011-01-12T22:44:11+05:30</updated>
    <id>http://vishnuatrai.com/blog/2011/01/12/mongodb-vs-couchdb</id>
    <content type="html"><![CDATA[<p>Both MongoDB and CouchDB are document oriented databases with JSON style object data storage.  They have their pros and cons in different situations.<!--more--></p>

<h4>1) Map Reduce</h4>

<p>Mongo uses map reduce for data processing jobs, Couch uses map reduce for build all views.</p>

<h4>2) Atomicity</h4>

<p>Both support concurrent modifications of single documents.  Both forego complex transactions involving large numbers of objects.</p>

<h4>3) Interface</h4>

<p>Couch uses REST as its interface to the database. Mongo relies on language specific database drivers.</p>

<h4>4) Query Expression</h4>

<p>Couch uses index building schemes to generate indexes those support particular queries. Mongo uses traditional dynamic queries and query optimizer to determine whether index exists or not.</p>

<h4>5) Horizontal Scalability</h4>

<p>Couch uses replication as a way to scale, instead Mongo uses sharding as a way to scale that is similar to Google&rsquo;s BigTable.</p>

<h4>6) Storage strategy</h4>

<p>Couch MVCC based, Mongo uses traditional approach and updates an object in place when possible.</p>

<h3>Use cases</h3>

<p>Couch is very good for certain classes of problems:
   problems which need intense versioning; problems with offline databases that resync later;
   problems where you want a large amount of master-master replication happening.</p>

<p>Mongo is very good for different kind of problems:</p>

<pre><code>problems requiring high update rates of objects are a great fit; compaction is not necessary.
</code></pre>

<p>Mongo is more oriented towards master/slave and auto failover configurations than to complex master-master setups.   <br/>
With MongoDB you should see high write performance, especially for updates.</p>
]]></content>
  </entry>
  
</feed>
