<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@vishnuatrai]]></title>
  <link href="http://vishnuatrai.in/atom.xml" rel="self"/>
  <link href="http://vishnuatrai.in/"/>
  <updated>2020-01-20T12:40:13+05:30</updated>
  <id>http://vishnuatrai.in/</id>
  <author>
    <name><![CDATA[vishnuatrai.in]]></name>
    <email><![CDATA[vishnu.atrai@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dive into Docker Image Layers]]></title>
    <link href="http://vishnuatrai.in/blog/2019/12/26/dive-into-docker-image-layers/"/>
    <updated>2019-12-26T20:48:58+05:30</updated>
    <id>http://vishnuatrai.in/blog/2019/12/26/dive-into-docker-image-layers</id>
    <content type="html"><![CDATA[<p>I recently used a tool named <a href="https://github.com/wagoodman/dive"><code>dive</code></a> to explore docker images developed and maintained by teammates or opensourced docker images. I used to look into <code>Dockerfile</code> steps to explore image layes. <code>dive</code> brings cli-ui and using arrow and tab keys we can explore each layer in left pane while layer contents listed in right pane.<!--more--></p>

<p>Essentially <code>dive</code> based on docker api and its cache contents and provides commands to explore layer contents and minimize the size of images.</p>

<p>Installation</p>

<p><code>brew install dive</code></p>

<p>command to explore a image layers</p>

<p><code>dive &lt;docker-image-id&gt;</code></p>

<p>to build a image using <code>dive</code> command</p>

<p><code>dive build -t &lt;image-tag&gt; .</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jMeter - Optimize for load testing]]></title>
    <link href="http://vishnuatrai.in/blog/2019/11/11/jmeter-optimize-for-load-testing/"/>
    <updated>2019-11-11T17:40:57+05:30</updated>
    <id>http://vishnuatrai.in/blog/2019/11/11/jmeter-optimize-for-load-testing</id>
    <content type="html"><![CDATA[<p>These are the jMeter optimization steps we have taken to simulate 1M request per second concurrency test for REST application deployed on Kubernetes cluster.</p>

<h3>Use a High Capacity Jenkins Slave to run jMeter jmx script</h3>

<p>We have added a high capacity Jenkins slave node to run only jMeter performance test and have done jMeter installation on that server. All performance test jobs are restricted to run on that labeled slave node.<!--more-->
We can use available memory and CPU to optimize jMeter configuration.</p>

<h3>Run jMeter in non-GUI Mode</h3>

<p>Apart from developing jmx script or debugging request/response not use GUI mode to run load test. In GUI mode AWT Event Thread will disrupt both your test and JMeter in case of more or less high load. GUI mode consumes a lot of memory and other resources, which in turn negatively impacts your scripts and tests. Using the non-GUI mode of JMeter helps to reduce both resource requirements and potential errors.</p>

<h3>Increase the Java Heap Size</h3>

<p>Run JMeter with higher value of memory.</p>

<pre><code>`JVM_ARGS="-Xms512m -Xmx512m" jmeter.sh`
</code></pre>

<h3>Avoid Listeners</h3>

<p>Avoid UI listeners like graphs or results table to avoid OutOfMemory issues. Preferably only write results to a JTL.</p>

<h3>Minimize Metrics Need to Store</h3>

<p>Configure JMeter to ensure that it will only save the metrics that you absolutely need. You can control what to store by adding relevant lines to the user.properties file in jMeter installation.</p>

<h3>Generate Reports AFTER the Run</h3>

<p>It takes resources to be written (CPU and memory) and for analysis in XML format. Use the outputted .jtl files to create reports once the load test is finished. Building the report requires a great amount of CPU and memory resources.</p>

<h3>Tweak the JVM</h3>

<p>Settings like garbage collector (-XX:+UseConcMarkSweepGC), server JVM (-server) can be set inside JVM_ARGS by editing the JMeter launcher script.</p>

<p><code>NEW="-XX:NewSize=128m -XX:MaxNewSize=128m"</code> line in the JMeter command script should match with values provided in HEAP.</p>

<p><code>-XX:+UseConcMarkSweepGC</code> &ndash; this forces the usage of the CMS garbage collector. It will lower the overall throughput but leads to much shorter CPU intensive garbage collections.</p>

<p><code>-server</code> &ndash; this switches JVM into “server” mode with runtime parameters optimization. In this mode JMeter starts more slowly, but your overall throughput will be higher</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins Slave with Docker Executors]]></title>
    <link href="http://vishnuatrai.in/blog/2019/08/08/jenkins-slave-with-docker-executors/"/>
    <updated>2019-08-08T16:35:25+05:30</updated>
    <id>http://vishnuatrai.in/blog/2019/08/08/jenkins-slave-with-docker-executors</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.jenkins.io/display/JENKINS/Docker+Plugin">Docker Plugin</a> enables jenkins to run jobs as docker container. In such case we dont need to setup jenkins nodes(agents) with specific binaries, instead docker images will be used to run jobs.<!--more-->Jenkins master needs to be configured with docker host where we can push docker images, those will be used by agents to execute jobs.</p>

<h3>Global Configuration</h3>

<p>After installation of <code>Docker Plugin</code> from manage plugins options, we will need to configure docker host and templates to create docker executers in Global Configuration option.</p>

<p>Go to <strong>Global Configurations</strong> &ndash;> <strong>Docker</strong> &ndash;> fill the below configuration options to setup docker host <br />
<strong>Name</strong>    Name of docker slave to be used in job configuration  <br />
<strong>Docker Url</strong>    docker engine url and port  <br /></p>

<p><img src="http://vishnuatrai.in/images//posts/Jenkins7.png" alt="" /></p>

<p><strong>Docker Template</strong>    docker template is an executor, we can add multiple templates and it will enable multiple executors  <br />
Fill below configurations to setup docker template <br /></p>

<ul>
<li><strong>Docker Image</strong> image name that that is available on docker host and having binaries to run the job</li>
<li><strong>Container Settings</strong> > <strong>Volumes</strong> Provide the container volumes(ie. <code>/home/dockerslave/bin</code>) where the binaries available, these are mapped with host machine and binaries will be available on host machine to run the job.</li>
<li><strong>Label</strong> Provide the label to uniquely identify the executor and configure in job configuration</li>
<li><strong>Launch Method</strong> select <strong>Docker ssh compute launcher</strong></li>
<li><strong>Credentials</strong> select credential id to ssh into docker host container</li>
</ul>


<p><img src="http://vishnuatrai.in/images//posts/Jenkins4.png" alt="" />
<img src="http://vishnuatrai.in/images//posts/Jenkins5.png" alt="" />
<img src="http://vishnuatrai.in/images//posts/Jenkins6.png" alt="" /></p>

<h3>Job Configuration</h3>

<p><strong>Build</strong> > check <strong>Restrict where this project can be run</strong> > <strong>Label Expression</strong> > provide the docker template lable</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins - Add Slave nodes as JNLP agents]]></title>
    <link href="http://vishnuatrai.in/blog/2019/04/15/jenkins-add-slave-nodes-as-jnlp-agents/"/>
    <updated>2019-04-15T15:36:54+05:30</updated>
    <id>http://vishnuatrai.in/blog/2019/04/15/jenkins-add-slave-nodes-as-jnlp-agents</id>
    <content type="html"><![CDATA[<p>If it is required to run Jenkins master in an isolated network and master should not be allowed to connected to its nodes(agents), we can use JNLP method to add agents to master to process jobs in distributed manner. In this scenario, its not desirable to have master connections with slave(agent) nodes but agent to master connections only required. <!--more--></p>

<h3>Only Agent to master connections</h3>

<p>In this case the agent node will not be visible to the master, so the master can not initiate the agent process. You can use a different type of agent configuration in this case called &ldquo;JNLP&rdquo;. This means that the master does not need network &ldquo;ingress&rdquo; to the agent (but the agent will need to be able to connect back to the master). Handy for if the agents are behind a firewall, or perhaps in some more secure environment to do trusted deploys.</p>

<h3>Configuration</h3>

<p>In order to setup a slave agent in above scenario you need to first <strong>Enable the JNLP Agents</strong>:</p>

<p>Go to <strong>Manage Jenkins</strong> &ndash;> <strong>Configure Global Security</strong> &ndash;> under <strong>Agents</strong> section &ndash;> <strong>TCP port for inbound agents</strong> &ndash;> select <strong>Random</strong> &ndash;><strong>Save</strong>.</p>

<p><img src="http://vishnuatrai.in/images//posts/Jenkins1.png" alt="" /></p>

<h4>Setup slave agent node</h4>

<p>Go to <strong>Manage Jenkins</strong> &ndash;> <strong>Manage Nodes</strong> &ndash;>click on <strong>New Node</strong> &ndash;> Enter the <strong>node name</strong> &ndash;> Select <strong>permanent agent</strong>.</p>

<p>Fill the below details to configure the slave agent</p>

<h4>Description</h4>

<h4>Remote root directory</h4>

<p>This should be the workspace directory on slave agent</p>

<h4>Label</h4>

<p>Provide the label to uniquely identify the slave node</p>

<h4>Launch Method</h4>

<p>Select <strong>launch agent by Connecting it to the master</strong> for windows agents  <br />
and <strong>launch agents via ssh</strong> for linux agents</p>

<p><img src="http://vishnuatrai.in/images//posts/Jenkins2.png" alt="" /></p>

<p>To Launch the slave agent via command line  <br />
<strong>Download the agent.jar file and copy to agent node</strong>  <br />
<strong>Run agent.jar using command line</strong></p>

<pre><code>java --jar agent.jar -jnlpUrl &lt;jenkins master url&gt; -secret &lt;secret given on node configuration&gt; -workDir "/user/agent/home/workspace"
</code></pre>

<p><img src="http://vishnuatrai.in/images//posts/Jenkins3.png" alt="" /></p>

<p>With above command agent is authorized and registered with jenkins master. Now agent is successfully configured and launched, which can be verified on master nodes. Jenkins master can delegate jobs to agent node.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ProxySQL - MySQL High Availability Load Balancing]]></title>
    <link href="http://vishnuatrai.in/blog/2018/11/12/proxysql-mysql-high-availability-load-balancing/"/>
    <updated>2018-11-12T22:59:40+05:30</updated>
    <id>http://vishnuatrai.in/blog/2018/11/12/proxysql-mysql-high-availability-load-balancing</id>
    <content type="html"><![CDATA[<h3>What is ProxySQL?</h3>

<ul>
<li>Lightweight Proxy layer for MySQL</li>
<li>Its protocol aware that we put between application and database server</li>
<li>Improve database operations <!--more--></li>
<li>Understand and solve performance issues</li>
<li>A proxy layer to shield the database</li>
<li>Add high availability to database topology</li>
</ul>


<h3>Why ProxySQL/HAProxy?</h3>

<p>ProxySQL provides below advantages if included in deployment stack</p>

<ul>
<li>Scalability

<ul>
<li>Connection Pooling and multiplexing</li>
<li>Read/Write split</li>
<li>Read/Write sharding</li>
</ul>
</li>
<li>High Availability

<ul>
<li>Seamless failover</li>
<li>Load balancing</li>
<li>Cluster aware</li>
</ul>
</li>
<li>Advance query and support

<ul>
<li>Query caching</li>
<li>Query rewrite</li>
<li>Query blocking</li>
<li>Query mirroring</li>
<li>Query throttling</li>
<li>Query timeout</li>
</ul>
</li>
<li>Manageability

<ul>
<li>Admin Utility</li>
<li>Runtime reconfiguration</li>
<li>Monitoring</li>
</ul>
</li>
</ul>


<h3>ProxySQL Configurations Options</h3>

<pre><code>mysql_replication_hostgroups
mysql_servers
mysql_server_connect_log
mysql_server_ping_log
mysql_server_replication_lag_log
mysql_server_read_only_log
stats_mysql_connection_pool
stats_mysql_commands_counters
mysql_query_rules
stats_mysql_query_digest
</code></pre>

<h3>Deploying with Kubernetes/Openshift &ndash; The Sidecar Pattern</h3>

<p>We can deploy the <code>proxysql</code> image in same pod as application image but data base references we will need to provide as <code>localhost</code> or <code>127.0.0.1</code> and port will be <code>6033</code> (the default proxysql port). The application will connect to proxysql server and it will then redirect database queries to mysql database cluster.</p>

<p>Openshift/kubernetes template spec &ndash;</p>

<pre><code>spec:
 template:
  spce:
   volumes:
    -
   name: "proxysql-configiguration-file"
     secret:
      secretName: "proxysql-configuration"
   containers:
    -
   name: "proxysql-service"
     image: "docker.com/proxysql/proxysql:1.0"
     ports:
      -
   containerPort: 6033
       protocal: TCP
   env:
   resources:
   volumeMounts:
    -
   name: "proxysql-configuration"
     readOnly: true
     mountPath: "/etc/prosysql-config"
</code></pre>

<h3>References</h3>

<p><a href="https://www.proxysql.com/">https://www.proxysql.com/</a></p>

<p>docker sandbox</p>

<p><a href="https://github.com/vishnuatrai/MySQLSandbox">https://github.com/vishnuatrai/MySQLSandbox</a></p>

<p>github</p>

<p><a href="https://github.com/sysown/proxysql">https://github.com/sysown/proxysql</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB Change Streams - Real time oplog notifications]]></title>
    <link href="http://vishnuatrai.in/blog/2018/07/05/mongodb-change-streams-real-time-notifications-to-subscribers-for-data-updates/"/>
    <updated>2018-07-05T17:19:31+05:30</updated>
    <id>http://vishnuatrai.in/blog/2018/07/05/mongodb-change-streams-real-time-notifications-to-subscribers-for-data-updates</id>
    <content type="html"><![CDATA[<p>Change Stream is easiest way to subscribe database changes realtime, its based on mongoDB oplog(Operation Log) technology. An ideal use case would be ETL operational data to a reporting and visualization data store via kafka data pipeline.</p>

<h3>MongoDB real time data sync technologies</h3>

<ol>
<li>mongodb oplog technology based changestream enable applications to stream real-time data changes</li>
<li>changestream can notify your application of all writes to documents (including deletes) without polling.</li>
<li>changestream advantages over oplog</li>
</ol>


<h2>Use case</h2>

<p>MongoDB changestream (operation logs, create, update, delete) will be as data source. Java springboot based application to subscribe changes and push to kafka topic. Kafka data pipeline can refine data, transform, filter and sync in to a big data storage for reporting, visualization or many other purpose.</p>

<pre><code>###Java sample
import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoClientURI;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.changestream.FullDocument;
import com.mongodb.client.model.changestream.ChangeStreamDocument;
import org.bson.Document;


MongoClient mongoClient = new MongoClient(new MongoClientURI("mongodb://localhost:27017,localhost:27018,localhost:27019"));
MongoDatabase database = mongoClient.getDatabase("test");
MongoCollection&lt;Document&gt; collection = database.getCollection("restaurants");

Block&lt;ChangeStreamDocument&lt;Document&gt;&gt; printBlock = new Block&lt;&gt;() {
@Override
    public void apply(final ChangeStreamDocument&lt;Document&gt; changeStreamDocument) {
        System.out.println(changeStreamDocument);
    }
};

collection.watch().forEach(printBlock);
</code></pre>

<h3>changestream advantages over oplog</h3>

<ol>
<li><strong><em>Use access control</em></strong> (no admin user required to access changestream)</li>
<li><strong><em>Present a Defined API</em></strong>, API syntax takes advantage of the established MongoDB query language, and are independent of the underlying oplog format.</li>
<li><strong><em>Total Ordering</em></strong>, subscriber applications will always receive changes in the order they were applied to the database.</li>
<li><strong><em>Filters</em></strong>, Changes can be filtered to provide relevant and targeted changes to listening applications. As an example, filters can be on operation type or fields within the document.</li>
<li><strong><em>Power of aggregation</em></strong>, define change streams on any collection just like any other normal aggregation operators using <code>$changeStream</code> operator and <code>watch()</code> method</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is new in Rails 5.2]]></title>
    <link href="http://vishnuatrai.in/blog/2018/01/20/what-is-new-in-rails-5-dot-2/"/>
    <updated>2018-01-20T16:02:51+05:30</updated>
    <id>http://vishnuatrai.in/blog/2018/01/20/what-is-new-in-rails-5-dot-2</id>
    <content type="html"><![CDATA[<h3>Active Storage</h3>

<p>Active Storage supports modern approach for file uploading to Amazon S3, Google Cloud Storage, Microsoft Azure Cloud file storage. It will also provide references to active record database tables <code>active_storage_blobs</code> and <code>active_storage_attachments</code>. <code>rails active_storage:install</code> will install initial setup for active storage.<!--more-->Configure and setup <code>config/storage.yml</code> cloud credentials and storage buckets.</p>

<pre><code>#config/storage.yml
local:
  service: Disk
  root: &lt;%= Rails.root.join("storage") %&gt;
test:
  service: Disk
  root: &lt;%= Rails.root.join("tmp/storage") %&gt;
amazon:
  service: S3
  access_key_id: ""
  secret_access_key: ""
  bucket: ""
  region: ""
</code></pre>

<h3>Redis Cache Store</h3>

<p>Rails 5.2 ships with built-in Redis cache store. The Redis cache store takes advantage of Redis support for automatic eviction when it reaches max memory, allowing it to behave much like a Memcached cache server.</p>

<p>Finally, add the configuration in the relevant <code>config/environments/*.rb</code> file:</p>

<pre><code>config.cache_store = :redis_cache_store, { url: 'redis://redis-server:6379' }
</code></pre>

<h3>HTTP/2 Early Hints</h3>

<p>This means we can automatically instruct the web server to send required style sheet and JavaScript assets early. Which means faster full page delivery.</p>

<p>To start the server with Early Hints enabled pass <code>--early-hints</code> to <code>rails server</code></p>

<h3>Credentials</h3>

<p>Added <code>config/credentials.yml.enc</code> file to store production app secrets. It allows saving any authentication credentials for third-party services directly in repository encrypted with a key in the <code>config/master.key</code> file or the <code>RAILS_MASTER_KEY</code> environment variable</p>

<p>To add new secret to credentials, first run rails secret to get a new secret. Then run rails credentials:edit to edit credentials, and add the secret. Running credentials:edit creates new credentials file and master key, if they did not already exist.</p>

<p>By default, this file contains the application&rsquo;s <code>secret_key_base</code>, but it could also be used to store other credentials such as access keys for external APIs.</p>

<p>The secrets kept in credentials file are accessible via <code>Rails.application.credentials</code>. For example, with the following decrypted <code>config/credentials.yml.enc</code></p>

<p>  #config/credentials.yml.enc</p>

<pre><code>secret_key_base:&lt;secret key base&gt;
api_client_key: &lt;secret key1&gt;
api_client_secret: &lt;secret key2&gt;
</code></pre>

<h3>Content Security Policy</h3>

<p>Content security policy can be configured as a global default policy and then override it on a per-resource basis and even use lambdas to inject per-request values into the header such as account subdomains in a multi-tenant application.</p>

<p>The HTTP <code>Content-Security-Policy</code> response header allows web site administrators to control resources the user agent is allowed to load for a given page. With a few exceptions, policies mostly involve specifying server origins and script endpoints.</p>

<p>Example &ndash;
  # config/initializers/content_security_policy.rb</p>

<pre><code>Rails.application.config.content_security_policy do |policy|
  policy.default_src :self, :https
  policy.font_src    :self, :https, :data
  policy.img_src     :self, :https, :data
  policy.object_src  :none
  policy.script_src  :self, :https
  policy.style_src   :self, :https

  # Specify URI for violation reports
  policy.report_uri "/csp-violation-report-path"
end
</code></pre>

<p>Example controller overrides:</p>

<pre><code># Override policy inline
  class PostsController &lt; ApplicationController
    content_security_policy do |p|
      p.upgrade_insecure_requests true
    end
  end

# Using literal values
  class PostsController &lt; ApplicationController
    content_security_policy do |p|
      p.base_uri "https://www.example.com"
    end
  end

# Disabling the global CSP
  class PagesController &lt; ApplicationController
    content_security_policy false, only: :index
  end
</code></pre>

<br/>


<p>References: <a href="https://guides.rubyonrails.org/5_2_release_notes.html">https://guides.rubyonrails.org/5_2_release_notes.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearch - mapper_parsing_exception, failed to parse field]]></title>
    <link href="http://vishnuatrai.in/blog/2017/12/20/elasticsearch-mapper-parsing-exception/"/>
    <updated>2017-12-20T15:37:59+05:30</updated>
    <id>http://vishnuatrai.in/blog/2017/12/20/elasticsearch-mapper-parsing-exception</id>
    <content type="html"><![CDATA[<p>We have recently faced issue with Elasticsearch field types and mapping, when if a field is mapped with a type other type can not be indexed for the same field. Elasticsearch indesing mechanism ristrict that. for example we have created a index named <code>users</code> and inserted a record with <code>text</code> type field <code>name</code>. <!--more--></p>

<p><img src="http://vishnuatrai.in/images//posts/elasticsearch1.png" alt="" /></p>

<p>Second record we want to insert same field with another type per say <code>object</code>, it will raise exceptation <code>mapper_parsing_exception, failed to parse field</code>.</p>

<p><img src="http://vishnuatrai.in/images//posts/Elasticsearch2.png" alt="" /></p>

<p>Because with insertation of first record the index will create a mapping and provide the field type <code>text</code> with second record insertation where the type is an object it will not match with the mapping and raise exceptation.</p>

<p><img src="http://vishnuatrai.in/images//posts/elasticsearch3.png" alt="" /></p>

<h3>Simple Hack But Many pitfalls</h3>

<p>Since by nature Elasticsearch doesn&rsquo;t support above scenario, once the mapping is created and type is assigned to a field it will not allow indexing of other type. However in my case we have to store the data in elasticsearch engine, so converted the object to string and that worked. But it will not support query on the converted object and on client side also we will need to convert back to object type.</p>

<p><img src="http://vishnuatrai.in/images//posts/elasticsearch4.png" alt="" /></p>

<p>After converting the object to text it will indexed as a text field only and will look like a escaped string object.</p>

<p><img src="http://vishnuatrai.in/images//posts/elasticsearch5.png" alt="" /></p>

<p>Still investigating on better solution or way to work on this issue.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is new in Rails 5]]></title>
    <link href="http://vishnuatrai.in/blog/2016/07/05/what-is-new-in-rails-5/"/>
    <updated>2016-07-05T17:34:19+05:30</updated>
    <id>http://vishnuatrai.in/blog/2016/07/05/what-is-new-in-rails-5</id>
    <content type="html"><![CDATA[<h3>ActionCable</h3>

<p>Action Cable can integrates websocket with rails application. Action Cable server can handle multiple connection instances. It has only one instance per websocket connection. The client websocker connection(consumer) can subscribe to multiple cable channels.<!--more-->For example Action Cable server can have a <code>ChatChannel</code> and an <code>AppearancesChannel</code> and a consumer(websocket) can subscribe to either one or both of channels.</p>

<pre><code>#Publisher Streams
# app/channels/chat_channel.rb
class ChatChannel &lt; ApplicationCable::Channel
    def subscribed
        stream_from "chat_#{params[:room]}"
    end
end

#Subscriber
// app/javascript/channels/chat_channel.js
import consumer from "./consumer"
consumer.subscriptions.create({ channel: "ChatChannel", room: "Best Room" })
</code></pre>

<h3>ActiveRecord::Attributes</h3>

<p>Define an <code>attribute</code> on a model with type. It is not essential to have a database column with the custom model <code>attribute</code>. <code>attribute</code> can also be used to provide default values.</p>

<pre><code># db/schema.rb
create_table :profiles, force: true do |t|
    t.decimal :gpa
    t.string :name, default: "Full Name"
end

# app/models/profile.rb
class Profile &lt; ActiveRecord::Base
end

profile = Profile.new(gpa: '4.1')

# before
profile.gpa # =&gt; BigDecimal.new(4.1)
profile.new.name # =&gt; "Full Name"

class Profile &lt; ActiveRecord::Base
    attribute :gpa, :integer # custom type
    attribute :name, :string, default: "Your Name" # default value
    attribute :current_time, :datetime, default: -&gt; { Time.now } # default value
    attribute :field_without_db_column, :integer, array: true
end

# after
profile.gpa # =&gt; 10
Profile.new.name # =&gt; "Your Name"
Profile.new.current_time # =&gt; 2015-05-30 11:04:48 -0600
model = Profile.new(field_without_db_column: ["1", "2", "3"])
model.attributes # =&gt; {field_without_db_column: [1, 2, 3]}
</code></pre>

<h3>Rails API &ndash; ActionController::API</h3>

<p>To avoid middlewares used for browser based web applications and server public facing json APIs, we can create API only rails application here after 5.0. <code>rails new my_api --api</code> can be used to generate application which will be API only and will not generate assets and views.</p>

<pre><code># app/controllers/application_controller.rb
class ApplicationController &lt; ActionController::API
end
</code></pre>

<h3>Ruby 2.2.2+ required version from Rails 5.0</h3>

<p>Ruby 2.2.2+ required version from Rails 5.0</p>

<br />


<br />


<h3>References</h3>

<p><a href="https://guides.rubyonrails.org/5_0_release_notes.html">https://guides.rubyonrails.org/5_0_release_notes.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is new in Rails 4.2]]></title>
    <link href="http://vishnuatrai.in/blog/2015/01/15/what-is-new-in-rails-4-dot-2/"/>
    <updated>2015-01-15T17:58:43+05:30</updated>
    <id>http://vishnuatrai.in/blog/2015/01/15/what-is-new-in-rails-4-dot-2</id>
    <content type="html"><![CDATA[<h3>Active Job</h3>

<p>Active Job is a framework for declaring jobs and making them run on a variety of queueing backends. These jobs can be everything from regularly scheduled clean-ups, to billing charges, to mailings. Anything that can be chopped up into small units of work and run in parallel.<!--more--></p>

<pre><code>class GuestsCleanupJob &lt; ActiveJob::Base
  queue_as :default

  def perform(*guests)
    # Do something later
  end
end

# Enqueue a job to be performed as soon the queuing system is free.
GuestsCleanupJob.perform_later guest

#Setting the Backend
# config/application.rb
module YourApp
  class Application &lt; Rails::Application
    # Be sure to have the adapter's gem in your Gemfile and follow
    # the adapter's specific installation and deployment instructions.
    config.active_job.queue_adapter = :sidekiq
  end
end
</code></pre>

<h3>Asynchronous Mails</h3>

<p>Building on top of Active Job, Action Mailer now comes with a <code>deliver_later</code> method that sends emails via the queue, so it doesn&rsquo;t block the controller or model if the queue is asynchronous (the default inline queue blocks).</p>

<p>Sending emails right away is still possible with <code>deliver_now</code>.</p>

<h3>Adequate Record</h3>

<p>Adequate Record is a set of performance improvements in Active Record that makes common find and find_by calls and some association queries up to 2x faster.</p>

<p>It works by caching common SQL queries as prepared statements and reusing them on similar calls, skipping most of the query-generation work on subsequent calls.</p>

<pre><code>Post.find(1)  # First call generates and cache the prepared statement
Post.find(2)  # Subsequent calls reuse the cached prepared statement

Post.find_by_title('first post')
Post.find_by_title('second post')

Post.find_by(title: 'first post')
Post.find_by(title: 'second post')

post.comments
post.comments(true)
</code></pre>

<p>Caching is not used in the following scenarios:</p>

<pre><code>- The model has a default scope
- The model uses single table inheritance
- find with a list of ids, eg.
    Post.find(1, 2, 3)
    Post.find([1,2])
- find_by with SQL fragments, eg.
    Post.find_by('published_at &lt; ?', 2.weeks.ago)
</code></pre>

<h3>Web Console</h3>

<p>Web Console adds an interactive Ruby console on every error page and provides a console view and controller helpers.</p>

<p>The interactive console on error pages lets you execute code in the context of the place where the exception originated. The console helper, if called anywhere in a view or controller, launches an interactive console with the final context, once rendering has completed.</p>

<h3>Foreign Key Support</h3>

<p>The migration DSL now supports adding and removing foreign keys. They are dumped to <code>schema.rb</code> as well. At this time, only the <code>mysql</code>, <code>mysql2</code> and <code>postgresql</code> adapters support foreign keys.</p>

<pre><code># add a foreign key to `articles.author_id` referencing `authors.id`
add_foreign_key :articles, :authors

# add a foreign key to `articles.author_id` referencing `users.lng_id`
add_foreign_key :articles, :users, column: :author_id, primary_key: "lng_id"

# remove the foreign key on `accounts.branch_id`
remove_foreign_key :accounts, :branches

# remove the foreign key on `accounts.owner_id`
remove_foreign_key :accounts, column: :owner_id
</code></pre>

<h3>References</h3>

<p><a href="http://guides.rubyonrails.org/4_2_release_notes.html">http://guides.rubyonrails.org/4_2_release_notes.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 2.2.0 Features]]></title>
    <link href="http://vishnuatrai.in/blog/2014/12/30/ruby-2-dot-2-features/"/>
    <updated>2014-12-30T17:53:04+05:30</updated>
    <id>http://vishnuatrai.in/blog/2014/12/30/ruby-2-dot-2-features</id>
    <content type="html"><![CDATA[<h3>1) Incremental and Symbol GC (RIncGC)</h3>

<p>Ruby 2.2.0 release includes several grabage collection (GC) improvements. Symbols are now garbage collectable.</p>

<p>Following the introduction of generational garbage collection in Ruby 2.1.0, which markedly improved the GC throughput, Ruby maintainers continue to introduce important changes in this space. The generational GC (RGenGC) classifies objects into generations, on the assumption that most objects die young. <!--more--> This assumption allows for high throughput and low pause time on younger objects, because older objects are only evaluated for deletion when there is no memory. But this means that older objects still suffer from high pause time.</p>

<p>The incremental GC (RIncGC), built on top of the generational GC, aims to cut that pause time while maintaining the same throughput. It achieves the shorter pause time by interleaving the mark phase, where objects are marked for GC, with Ruby&rsquo;s regular execution. Before Ruby 2.2.0, the mark phase was done in one big step.</p>

<h3>2) Rails 5.0 support</h3>

<p>Rails 5.0 will target Ruby 2.2+ exclusively. There are a bunch of optimizations coming in Ruby 2.2 that are going to be very nice, but most importantly for Rails, symbols are going to be garbage collected. This means we can shed a lot of weight related to juggling strings when we accept input from the outside world. It also means that we can convert fully to keyword arguments and all the other good stuff from the latest Ruby.</p>

<h3>3) Binding#local_variables</h3>

<p>To know the local variables defined in a scope use <code>binding.local_variables</code> that will give all variables in use.</p>

<pre><code>def m1(a, b)
  puts binding.local_variables
  c = a + b
  puts binding.local_variables
  c
end

irb(main):001&gt; m1(2,3)
[:a, :b, :c]
[:a, :b, :c]
=&gt;5
</code></pre>

<h3>4) Binding#receiver</h3>

<p>Ruby 2.2 provides a way to know which object is receiving the method call using <code>binding.receiver</code> method</p>

<pre><code>class Amimal
  def self.walk
    puts 'walk'
    binding.receiver
  end 
end

irb(main):001&gt; Amimal.walk
walk
=&gt;Animal

class Dog &lt; Animal
end 

irb(main):002&gt; Dog.walk
walk
=&gt;Dog
</code></pre>

<h3>5) Enumerable#slice_after</h3>

<p>This method is a complement to the existing <code>slice_before</code> method.</p>

<p>As the name suggests, <code>slice_before</code> is used to slice and dice enumerables. Given a way to match an element in the enumerable, it will find a match and cut it apart just prior to the match.</p>

<pre><code>irb(main):001&gt;[1, 'a', 2, 'b', 'c', 3, 'd', 'e', 'f'].slice_before { |e| e.is_a?(Integer) }.to_a
=&gt;[[1, "a"], [2, "b", "c"], [3, "d", "e", "f"]]
</code></pre>

<p><code>slice_after</code> does slices after instead:</p>

<pre><code>irb(main):002&gt;[1, 'a', 2, 'b', 'c', 3, 'd', 'e', 'f'].slice_after(Integer).to_a
=&gt;[[1], ["a", 2], ["b", "c", 3], ["d", "e", "f"]]
</code></pre>

<h3>6) Enumerable#slice_when</h3>

<p>A particularly fun addition is <code>slice_when</code>. Unlike <code>slice_after</code>, this method only accepts a block. It walks an enumerable, passing pairs of elements to the block. When the block returns <code>true</code>, the enumerable is sliced between the pair of elements:</p>

<pre><code>irb(main):001&gt;[1, 3, 4, 5, 7, 8, 9, 10, 12].slice_when { |a, b| a + 1 != b }.to_a
=&gt;[[1], [3, 4, 5], [7, 8, 9, 10], [12]]
</code></pre>

<h3>7) Float#next_float, Float#prev_float</h3>

<p>These functions return the next or previous representable float. Note the word “representable” in that sentence, not all floats can be represented.</p>

<pre><code>irb(main):001&gt;1.0.next_float
=&gt;1.0000000000000002

irb(main):002&gt;1.0.prev_float
=&gt;0.9999999999999999
</code></pre>

<h3>8) Kernel#itself</h3>

<p>Ruby went out and got itself an identity method. For those not familiar, an identity method returns the object it’s called on:</p>

<pre><code>irb(main):001&gt;1.itself
=&gt;1

irb(main):002&gt;[2, 3, 3, 1, 2, 3, 3, 1, 1, 2].group_by(&amp;:itself)
=&gt;{2=&gt;[2, 2, 2], 3=&gt;[3, 3, 3, 3], 1=&gt;[1, 1, 1]}
</code></pre>

<h3>8) Method#curry</h3>

<p>You might not have realized that Ruby is capable of currying and partial application. In the past, you could only call <code>curry</code> on a <code>Proc</code>. This same power is now available to you on <code>Method</code>.</p>

<pre><code>def sum(*args)
  args.reduce(:+)
end 

irb(main):001&gt;inc = method(:sum).curry(2).(1)
=&gt;#&lt;Proc:0x007fff322d7420 (lambda)&gt;
irb(main):002&gt;inc.(3)
=&gt;4
</code></pre>

<h3>9) Method#super_method</h3>

<p>Calling <code>super_method</code> returns the method that you would get if you called <code>super</code>. If the method has no parent, it returns <code>nil</code>.</p>

<pre><code>class Cat
  def speak
    'meow'
  end
end

class Tiger &lt; Cat
  def speak
    'roar'
  end
end

irb(main):001&gt;Tiger.new.method('speak')
=&gt;#&lt;Method: Tiger#speak&gt; 
irb(main):002&gt;Tiger.new.method('speak').super_method
=&gt;#&lt;Method: Cat#speak&gt;
irb(main):002&gt;Cat.new.method('speak').super_method
=&gt;nil
</code></pre>

<h3>10) Quoted symbol keys in hashes with a trailing colon</h3>

<p>Ruby 2.2 lets you create quoted symbol keys in hashes with a trailing colon:</p>

<pre><code>irb(main):001&gt;{ 'programming-language': :ruby }
</code></pre>

<h3>References</h3>

<p><a href="https://github.com/ruby/ruby/blob/v2_2_0/NEWS">https://github.com/ruby/ruby/blob/v2_2_0/NEWS</a></p>

<p><a href="https://www.ruby-lang.org/en/news/2014/12/25/ruby-2-2-0-released/">https://www.ruby-lang.org/en/news/2014/12/25/ruby-2-2-0-released/</a></p>

<p><a href="http://www.sitepoint.com/new-methods-ruby-2-2/">http://www.sitepoint.com/new-methods-ruby-2-2/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is new in Rails 4.1]]></title>
    <link href="http://vishnuatrai.in/blog/2014/05/31/what-is-new-in-rails-4-dot-1/"/>
    <updated>2014-05-31T19:59:28+05:30</updated>
    <id>http://vishnuatrai.in/blog/2014/05/31/what-is-new-in-rails-4-dot-1</id>
    <content type="html"><![CDATA[<p>Rails 4.1 is a minor release but includes interesting features below &ndash;</p>

<h3>Spring</h3>

<p>Spring is new application preloader(like spork and zeous) available by default<!--more-->
to rails app. Tests, rake and generators will be running much faster on large apps.</p>

<h3>Secrets</h3>

<p>New file config/secrets.yml for your sensitive data. It contains rails app default
secrets but you can add your secret keys here.</p>

<h3>Action Pack Variants</h3>

<p>Render different views, allows to have different templates and action responses for
the same mime type (say, HTML), even behave differently for phones, tablets and
desktop browsers. You can now have individual templates for the desktop, tablet,
and phone views while sharing all the same controller logic.</p>

<h3>ActionMailer Previews</h3>

<p>Sort of like LetterOpener and MailPreview, provide a way to visually see how emails
look by visiting a special URL that renders them. The preview is available in ie.
<a href="http://localhost:3000/rails/mailers/notifier/welcome,">http://localhost:3000/rails/mailers/notifier/welcome,</a> and a list of them in
<a href="http://localhost:3000/rails/mailers.">http://localhost:3000/rails/mailers.</a> By default, these preview classes live in
test/mailers/previews. This can be configured using the preview_path option.</p>

<h3>ActiveRecord enums</h3>

<p>Declare an enum attribute where the values map to integers in the database, but can
be queried by name. The good: Faster! Probably. It stores integers instead of strings.
You won&rsquo;t notice.</p>

<pre><code>class Conversation &lt; ActiveRecord::Base
  enum status: [ :active, :archived ]
end

conversation.archived!
Conversation.statuses # =&gt; { "active" =&gt; 0, "archived" =&gt; 1 }    
</code></pre>

<h3>Message Verifiers</h3>

<p>Message verifiers can be used to generate and verify signed messages. This can be
useful to safely transport sensitive data like remember-me tokens and friends.
The method Rails.application.message_verifier returns a new message verifier that
signs messages with a key derived from secret_key_base and the given message verifier name:</p>

<pre><code>signed_token = Rails.application.message_verifier(:remember_me).generate(token)
Rails.application.message_verifier(:remember_me).verify(signed_token) # =&gt; token

Rails.application.message_verifier(:remember_me).verify(tampered_token)
# raises ActiveSupport::MessageVerifier::InvalidSignature
</code></pre>

<h3>References</h3>

<p><a href="http://weblog.rubyonrails.org/2014/4/8/Rails-4-1/">http://weblog.rubyonrails.org/2014/4/8/Rails-4-1/</a></p>

<p><a href="http://edgeguides.rubyonrails.org/4_1_release_notes.html">http://edgeguides.rubyonrails.org/4_1_release_notes.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 2.1 Changelog]]></title>
    <link href="http://vishnuatrai.in/blog/2014/04/29/ruby-2-dot-1-changelog/"/>
    <updated>2014-04-29T12:01:04+05:30</updated>
    <id>http://vishnuatrai.in/blog/2014/04/29/ruby-2-dot-1-changelog</id>
    <content type="html"><![CDATA[<p>Ruby 2.1.0 has been released now question is, what&rsquo;s new in ruby 2.1.0. Below list of new
features introduced in ruby 2.1.0.</p>

<h3>1) def&rsquo;s return value <!--more--></h3>

<p>In earlier versions it was nil but in ruby 2.1 it will return a symbol.</p>

<pre><code>irb(main):002:0&gt; def my_method
irb(main):003:1&gt; end
=&gt; :my_method
</code></pre>

<h3>2) Rational Number and Complex Number Literals</h3>

<p>Earlier version you will have to use core classes to use relational and complex numbers,
ruby 2.1 gives r and i suffix for them. Older version will give error for these literals.</p>

<pre><code>irb(main):003:0&gt; (2+3i) + Complex(5, 4i)
=&gt; (3+3i)
</code></pre>

<h3>3) Required Keyword arguments</h3>

<p>Keyword arguments introduced by ruby 2.0 and there was no way to make them required.
In ruby 2.1 for missing keyword arguments it will raise
ArgumentError: missing keyword: keyword</p>

<pre><code>def permaliinkify(str:, delimiter: "-")
  str.downcase.split.join(delimiter)
end

irb(main):002:0&gt; permalinkify(delimiter: "-lol-")
ArgumentError: missing keyword: str
from (irb):LN
from /.rvm/2.1.0/bin/irb:11:in `&lt;main&gt;'
</code></pre>

<h3>4) Restricted Generational Garbage Collector (RGenGC)</h3>

<p>Ruby 2.1 introduced faster garbage collector RGenGC. That will make mark and sweep faster.
RGenGC design of garbage collector leverages the fact that most objects collected
by the garbage collector were the objects most recently created.</p>

<h3>5) Exception#cause</h3>

<p>Ruby 2.1 provides a way to have an exception carry a &ldquo;cause&rdquo; along with it.</p>

<pre><code>begin
  begin
    raise "Error!"
  rescue =&gt; e
    raise StandardError, "take the cause"
  end
rescue Exception =&gt; e
  puts "Caused by  : #{e.cause.message} [#{e.cause.class}]"
end
=&gt; Caused by  : Error! [RuntimeError]
</code></pre>

<h3>6) Refinements</h3>

<p>In ruby 2.1, Refinements provide an alternate way to scope our modifications in
ruby open classes or modules.</p>

<pre><code>module Permalinker
  refine String do
    def permalinkify
      downcase.split.join("-")
    end
  end
end

class Post
  using Permalinker
  def initialize(title)
    @title = title
  end
  def permalink
    @title.permalinkify
  end
end
irb(main):002:0&gt; post = Post.new("Ruby on Rails")
irb(main):002:0&gt; post.permalink
=&gt; "ruby-on-rails"
irb(main):023:0&gt; "ruby on rails".permalinkify
NoMethodError: undefined method `permalinkify' for "ruby on rails":String
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Critical Heartbleed fix for SSL]]></title>
    <link href="http://vishnuatrai.in/blog/2014/04/11/critical-heartbleed-fix-for-ssl/"/>
    <updated>2014-04-11T15:30:33+05:30</updated>
    <id>http://vishnuatrai.in/blog/2014/04/11/critical-heartbleed-fix-for-ssl</id>
    <content type="html"><![CDATA[<p>OpenSSL heartbleed bug allows hackers to untraceably read server traffic and some server memory. This implementation mistake leads to the leak of memory information from the server to the client and from the client to the server. <!--more--></p>

<p>For my Ruby on Rails application deployed on AWS, the minimal steps I took to upgrade fixed OpenSSL version given below &ndash;</p>

<p>  1) Update OpenSSL to 1.0.1g</p>

<pre><code>download source from here http://www.openssl.org/source/openssl-1.0.1g.tar.gz
tar -zxf openssl-1.0.1g.tar.gz 
cd openssl-1.0.1g
./config
make
make test
make install

openssl version

if this will show older version then do below steps

ln -s /usr/local/ssl/bin/openssl /usr/bin/openssl
</code></pre>

<p>  2) Recompile/reinstall ruby with new openssl version</p>

<p>  3) Recompile/reinstall libriaries or gems those are related to openssl</p>

<p>  4) Reboot the server</p>

<p>  5) Regenerate new private key and csr to generate new SSL certificate</p>

<p>  6) Change server access keys and passwords</p>

<p>  7) Change API keys, passwords, tokens</p>

<p>  8) Cahnge session secret key for cookie based session store</p>

<p>  9) Restart the web and app servers</p>

<p>  10) You can ask your application users to change their password</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress: Migrate Disqus Comments from WordPress]]></title>
    <link href="http://vishnuatrai.in/blog/2014/04/02/octopress-migrate-disqus-comments-from-wordpress/"/>
    <updated>2014-04-02T12:08:35+05:30</updated>
    <id>http://vishnuatrai.in/blog/2014/04/02/octopress-migrate-disqus-comments-from-wordpress</id>
    <content type="html"><![CDATA[<p>Last week I migrated my blog from WordPress to Octopress and find it very cool blogging engine. Though, migraiton of posts and pages was quite easy but migration or you can say linking of Disqus comments from WorlPress pages to Octopress was difficult.<!--more--> I tried lot of different options but could not relink the Disqus comments.</p>

<p>Then I read the Disqus documentation and advanced migration options, and I found a options using that we can relink our comments properly to new bloging urls.</p>

<p>If you read Tools option under Discussion tab, you will find a option &ldquo;Upload a URL Map&rdquo;. There it says if your blog urls or slug was changed you can provide a CSV file which maps your old urls to new urls.( Left side old urls, Right side new urls)
In my case CSV file format was similar to given below format.</p>

<pre><code>http://vishnuatrai.in/?page_id=2, http://vishnuatrai.in/about/index.html
http://vishnuatrai.in/?p=115, http://vishnuatrai.in/blog/2010/10/12/managed-rake-tasks-rake-migration/
http://vishnuatrai.in/?p=132, http://vishnuatrai.in/blog/2010/11/01/why-nosql/
</code></pre>

<p>The Disqus Crawler runs and relink your comments to new urls.</p>

<h3>Reference</h3>

<p><a href="http://help.disqus.com/customer/portal/articles/286778-using-the-migration-tools">http://help.disqus.com/customer/portal/articles/286778-using-the-migration-tools</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress: Programmer Friendly Blogging]]></title>
    <link href="http://vishnuatrai.in/blog/2014/03/27/octopress-programmer-friendly-blogging/"/>
    <updated>2014-03-27T13:39:53+05:30</updated>
    <id>http://vishnuatrai.in/blog/2014/03/27/octopress-programmer-friendly-blogging</id>
    <content type="html"><![CDATA[<p>Nowadays blogs I am reading are mostly running with jekyll and using octopress to publish. Lot of my friends migrated from WordPress to Octopress. I was curious why they are doing so and what is the advantege with Octopress over WordPress.<!--more--> As an experiment I started developing a gihub pages application using Octopress and I found it very simple and easy to write. Good fit for my blog application.</p>

<h3>Why I like?</h3>

<p>  1) Free github/heroku hosting and easy deploy</p>

<p>  2) No database required( even for comments )</p>

<p>  3) Easy to intigrate and restore comments with disqus( till it is free )</p>

<p>  4) Don&rsquo;t need to move from your terminal to publish a blog</p>

<p>  5) Skill required &ndash; git, markdown, vim/emacs( any text editor )</p>

<p>  6) Lightweight and Fast running</p>

<p>  7) Lots of themes available</p>

<p>  8) etc etc etc ( still exploring )</p>

<h3>Reference</h3>

<p>  <a href="http://octopress.org/">http://octopress.org/</a></p>

<p>  <a href="http://opthemes.com/">http://opthemes.com/</a></p>

<p>  <a href="http://everythingisgray.com/2013/06/15/on-migrating-from-wordpress-to-octopress">http://everythingisgray.com/2013/06/15/on-migrating-from-wordpress-to-octopress</a></p>

<p>  <a href="http://zhen.org/blog/migrating-40000-posts-from-wordpress-to-octopress/">http://zhen.org/blog/migrating-40000-posts-from-wordpress-to-octopress/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Object Oriented Programming]]></title>
    <link href="http://vishnuatrai.in/blog/2013/10/15/javascript-object-oriented-programming/"/>
    <updated>2013-10-15T18:00:18+05:30</updated>
    <id>http://vishnuatrai.in/blog/2013/10/15/javascript-object-oriented-programming</id>
    <content type="html"><![CDATA[<p>JavaScript is a prototype-based OOP language in which behaviour reuse
(inheritance) is achieved using existing objects which serve as prototypes. Whenever you
assign a object as prototype of other object, properties and methods will be available to
that object. <!--more-->You can override method or property in child object.</p>

<p>&ldquo;Everything&rdquo; in JavaScript is an Object. JavaScript allows you to define your own objects.
Objects are just data, with added properties and methods. This looks something similar to
ruby for me. Also root level prototype of a object is &ldquo;Object&rdquo; and prototype of &ldquo;Object&rdquo;
is null.</p>

<p>In this type of OOP languages there is no existences of classes like java. c#, ruby etc.
Here you create objects and inheritance you can achieve using prototype assignment.
Since only one prototype you can assign to a object so Javascript dosen&rsquo;t provide multiple
inheritence. Using prototype assignment chain to nexted level, it will provide multi-level
inheritence. eg</p>

<pre><code># A super class animal
function Animal(){
  this.legs = 0,
  this.word = '',
  this.walk = function(){
    var i = 0, s = '';
    for(; i &lt; this.legs; i++){
      s += ' step '
    }
    console.log(s);
  },
  this.speak = function(){
    console.log(this.word);
  }
};

a = new Animal();
a.walk()               =&gt; 
a.speak()              =&gt; 

# A child class human
function Human(){
  this.legs = 2,
  this.word = 'Hi'
};

Human.prototype = new Animal();

h = new Human();
h.walk()                =&gt; step step 
h.speak()               =&gt; Hi
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby for Multi-tenant SOA platform]]></title>
    <link href="http://vishnuatrai.in/blog/2013/08/02/multi-tenant-soa-platform-on-ruby-on-rails/"/>
    <updated>2013-08-02T18:03:45+05:30</updated>
    <id>http://vishnuatrai.in/blog/2013/08/02/multi-tenant-soa-platform-on-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>After cloud computing, Multi-tenancy and SOA become a buzzword for tech companies those provide B2B solutions.</p>

<p>Multi-tenancy will reduce the cost and simplifies the release management.<!--more--></p>

<p>On the other hand, SOA is to divide single monolithic application to multiple loosely coupled self contained independent applications aka services. SOA will benefit to develop new functions rapidly and scale platform in specific areas.</p>

<h3>Tools &amp; Tips for Multi-tenancy</h3>

<p>Database seperation for each client we are using apartment gem. That gives very easy interface
to manage seperate databases for different clients. To run background tasks we are using
apartment-sidekiq gem. That will automatically take care of database connection for a background
job initiated.</p>

<p>You add these gems in your Gemfile and good to go.</p>

<pre><code>gem 'apartment'
gem 'apartment-sidekiq'
</code></pre>

<h3>Tools and Tips for SOA (Service Oriented Architucture)</h3>

<p>To expose APIs you can use ruby lightwaight framework sinatra. ActiveRecord for ORM to backend
You can use rspec for testing framework. Sometimes you make multiple requests to different
services for a action, in these scenerios you can make parallel requests using typhoeus gem.
That will make a block call, get the response from different services, process those
responses and give back the result to end user. In your Gemfile you can add typhoeus.</p>

<pre><code>gem 'sinatra'
gem 'activerecord'
gem 'typhoeus'
</code></pre>

<p>You can use JSON responses for all your APIs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is new in Rails 4.0]]></title>
    <link href="http://vishnuatrai.in/blog/2013/07/18/what-is-new-in-rails-4-dot-0/"/>
    <updated>2013-07-18T19:58:40+05:30</updated>
    <id>http://vishnuatrai.in/blog/2013/07/18/what-is-new-in-rails-4-dot-0</id>
    <content type="html"><![CDATA[<p>Rails 4.0 and newer version will support ruby 1.9.3+ only. It wont work with lessor
version then ruby 1.9.3. Major developments are below &ndash;</p>

<h3>Ruby 2.0 preferred; 1.9.3+ required</h3>

<h3>Strong Parameters</h3>

<h3>Turbolinks</h3>

<h3>Russian Doll Caching</h3>

<h3>Live Streaming</h3>

<h3>Rails Queue</h3>

<h3>Asynchronous Action Mailer</h3>

<h3>Barebone Models &ndash; ActiveModel::Model</h3>

<h3>Http PATCH</h3>

<h3>Custom Flash Types</h3>

<h3>Flush content_for blocks</h3>

<h3>Rounting Concerns</h3>

<h3>Multiple Route Files</h3>

<h3>PostgreSQL Array Support</h3>

<h3>Page and Action Caching</h3>

<h3>Cache Digest</h3>

<h3>Controller Wise ETags</h3>

<h3>where.not and Chainable relation.none and Relation._!</h3>

<h3>Action Callbacks Renamed</h3>

<h3>Default Index Page</h3>

<h3>HTML5 Input Helpers</h3>

<h3>Models Concerns</h3>

<h3>vendor/plugins and Ruby 1.9.3 Lesser Banned!</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4 - ActiveSupport::Concern]]></title>
    <link href="http://vishnuatrai.in/blog/2013/06/24/rails-4-activesupport-concern/"/>
    <updated>2013-06-24T18:00:23+05:30</updated>
    <id>http://vishnuatrai.in/blog/2013/06/24/rails-4-activesupport-concern</id>
    <content type="html"><![CDATA[<p>Rails 4 ActiveSupport::Concern is a very cool feature to organize your module in such a way
that when you include module in a class you don&rsquo;t need to write extra callbacks to extend or
include methods in your class. This feature is a great way to keep your code organized and DRY. This handles module dependencies also.</p>

<!--more-->


<p>You just need to require activesupport/concern and need to extend your module with ActiveSupport::Concern.
When you include your module in a class, included block will be executed with in class
context, ClassMethods block will be added to class itself and methods inside will become
class methods, other methods outside included and ClassMethods block will be included as
instance methods. eg.</p>

<pre><code>module Commentable
  extend ActiveSupport::Concern

  included do         # This block will be executed within class itself
    has_many :comments, as: :commentable, dependent: :destroy
    scope :with_comments, -&gt;{ joins(:comments) }
  end 

  module ClassMethods # Methods within this black will be added to class methods
    def comment_search(params)
      .....
    end
  end

  def comment_titles  # This method will be added to instance methods
    comments.map(&amp;:title) 
  end      
  def comment_users   # This method will be added to instance methods
    comments.map(&amp;:username)
  end

end
</code></pre>

<p>This should be your module structure and when you include your module in class it will work.
No method will break. eg.</p>

<pre><code>Class Post
  include Commentable
end

Post.with_comments  
Post.comment_search({}) 

p = Post.find(1)
p.comments
p.comment_titles
p.comment_users
</code></pre>
]]></content>
  </entry>
  
</feed>
